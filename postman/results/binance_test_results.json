{
  "collection": {
    "_": {
      "postman_id": "c8f9e234-5d78-4c12-b3a4-8e2f1a9b7c3d",
      "exporter_id": "12345678"
    },
    "item": [
      {
        "id": "197201dc-7293-4155-b401-7dbbbbfabdf3",
        "name": "Binance REST Endpoints",
        "description": {
          "content": "New REST endpoints for Binance operations. These endpoints use Temporal workflows internally for robust execution.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "697290c8-a361-4ed2-a163-7a0d6b222245",
            "name": "Get Crypto Quotes",
            "request": {
              "url": {
                "path": [
                  "api",
                  "exchange",
                  "binance",
                  "v1",
                  "quotes"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8883ecf4-03f8-458a-a154-912fbdf2c9e1",
                  "type": "text/javascript",
                  "exec": [
                    "// Test response status",
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "// Test response structure",
                    "pm.test(\"Response has quotes array\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('quotes');",
                    "    pm.expect(jsonData.quotes).to.be.an('array');",
                    "    pm.expect(jsonData).to.have.property('timestamp');",
                    "});",
                    "",
                    "// Test quotes content",
                    "pm.test(\"Quotes contain required fields\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.quotes && jsonData.quotes.length > 0) {",
                    "        const quote = jsonData.quotes[0];",
                    "        pm.expect(quote).to.have.property('symbol');",
                    "        pm.expect(quote).to.have.property('lastPrice');",
                    "        pm.expect(quote).to.have.property('askPrice');",
                    "        pm.expect(quote).to.have.property('bidPrice');",
                    "        pm.expect(quote).to.have.property('volume');",
                    "        pm.expect(quote).to.have.property('timestamp');",
                    "    }",
                    "});",
                    "",
                    "console.log('Quotes Response:', pm.response.json());"
                  ],
                  "_lastExecutionId": "8fccc2e0-64d0-46a0-93f8-a0f38f584c6d"
                }
              }
            ]
          },
          {
            "id": "043ab662-e220-4846-97c3-cbc827ebcdb6",
            "name": "Get All Orders",
            "request": {
              "url": {
                "path": [
                  "api",
                  "exchange",
                  "binance",
                  "v1",
                  "orders"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "89f67cbf-12bb-465c-a14d-196096f2a868",
                  "type": "text/javascript",
                  "exec": [
                    "// Test response status",
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "// Test response structure",
                    "pm.test(\"Response has orders array\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('orders');",
                    "    pm.expect(jsonData.orders).to.be.an('array');",
                    "    pm.expect(jsonData).to.have.property('timestamp');",
                    "});",
                    "",
                    "console.log('Orders Response:', pm.response.json());"
                  ],
                  "_lastExecutionId": "7d36170e-c17c-4efd-bec3-9e916d4a5af8"
                }
              }
            ]
          },
          {
            "id": "f5d72f83-7ab0-499a-a566-c3a5139d1b1e",
            "name": "Place Order",
            "request": {
              "description": {
                "content": "Places a new order on Binance exchange using Temporal workflow.\n\n**Input:** OrderRequest with symbol, side, type, quantity\n**Output:** OrderResponse with order details or error\n\n**Workflow:** BinancePlaceOrderWorkflow\n**Activity:** PlaceOrder\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "exchange",
                  "binance",
                  "v1",
                  "order"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"symbol\": \"BTCUSDT\",\n  \"side\": \"BUY\",\n  \"type\": \"MARKET\",\n  \"quantity\": 0.001\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f0dde370-bb4c-4aaa-85b2-74ce0834e80e",
                  "type": "text/javascript",
                  "exec": [
                    "// Test response status (may be 200 or 500 depending on API keys)",
                    "pm.test(\"Response received\", function () {",
                    "    pm.expect([200, 500]).to.include(pm.response.code);",
                    "});",
                    "",
                    "// Test response structure on success",
                    "if (pm.response.code === 200) {",
                    "    pm.test(\"Response has order information\", function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('orderId');",
                    "        pm.expect(jsonData).to.have.property('symbol');",
                    "        pm.expect(jsonData).to.have.property('status');",
                    "        pm.expect(jsonData).to.have.property('side');",
                    "        pm.expect(jsonData).to.have.property('type');",
                    "        pm.expect(jsonData).to.have.property('quantity');",
                    "        pm.expect(jsonData).to.have.property('timestamp');",
                    "    });",
                    "}",
                    "",
                    "console.log('Place Order Response:', pm.response.json());"
                  ],
                  "_lastExecutionId": "edd9e420-85ad-44a3-874a-19bcb1bac494"
                }
              }
            ]
          },
          {
            "id": "a87a8d24-ed86-4710-9608-57c1658081c0",
            "name": "Get Order Status",
            "request": {
              "description": {
                "content": "Retrieves the status of a specific order by orderId.\n\n**Input:** orderId as path parameter, symbol as query parameter\n**Output:** OrderResponse with current order status or error\n\n**Workflow:** BinanceGetOrderStatusWorkflow\n**Activity:** GetOrderStatus\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "api",
                  "exchange",
                  "binance",
                  "v1",
                  "order",
                  "123456"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "symbol",
                    "value": "BTCUSDT"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "508d1dc1-2bb4-4499-9f81-fc0d2fa56cab",
                  "type": "text/javascript",
                  "exec": [
                    "// Test response status (may be 200 or 500 depending on API keys)",
                    "pm.test(\"Response received\", function () {",
                    "    pm.expect([200, 500]).to.include(pm.response.code);",
                    "});",
                    "",
                    "// Test response structure on success",
                    "if (pm.response.code === 200) {",
                    "    pm.test(\"Response has order status\", function () {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('orderId');",
                    "        pm.expect(jsonData).to.have.property('symbol');",
                    "        pm.expect(jsonData).to.have.property('status');",
                    "        pm.expect(jsonData).to.have.property('side');",
                    "        pm.expect(jsonData).to.have.property('type');",
                    "        pm.expect(jsonData).to.have.property('quantity');",
                    "        pm.expect(jsonData).to.have.property('timestamp');",
                    "    });",
                    "}",
                    "",
                    "console.log('Order Status Response:', pm.response.json());"
                  ],
                  "_lastExecutionId": "4d551212-4810-4d27-bcae-7ffcb140b4b0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c5eb1abf-14d6-400a-88cf-f33dbb3cd71e",
        "name": "Legacy Workflow Endpoints",
        "description": {
          "content": "Legacy workflow endpoints using POST method. These maintain backward compatibility with the original workflow implementation.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "9f376ff2-5a83-4397-9dc0-1a2bbbba5941",
            "name": "Get Binance Price (Legacy)",
            "request": {
              "url": {
                "path": [
                  "api",
                  "workflow",
                  "v1",
                  "BinancePrice"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "\"BTCUSDT\"",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "821847d0-d64a-4c3e-a5a2-b98608808e33",
                  "type": "text/javascript",
                  "exec": [
                    "// Test response status",
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "// Test response structure",
                    "pm.test(\"Response has price information\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('symbol');",
                    "    pm.expect(jsonData).to.have.property('price');",
                    "    pm.expect(jsonData).to.have.property('timestamp');",
                    "    pm.expect(jsonData).to.have.property('success');",
                    "});",
                    "",
                    "console.log('Price Response:', pm.response.json());"
                  ],
                  "_lastExecutionId": "36c77639-fa03-41ea-8dd8-1c215018a71f"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "575227b8-86b1-4507-8e73-f27cb4ef7719",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "console.log('Testing Temporal Binance Workflows...');",
            "",
            "// Set collection variables",
            "pm.collectionVariables.set('base_url', 'http://localhost:8088');",
            "pm.collectionVariables.set('collection_version', '1.1.0');",
            "pm.collectionVariables.set('test_timestamp', new Date().toISOString());",
            "",
            "// Set Binance API keys as environment variables (for service to read)",
            "// ⚠️ IMPORTANT: Replace these with your actual Binance API keys",
            "const binanceApiKey = pm.collectionVariables.get('binance_api_key');",
            "const binanceSecretKey = pm.collectionVariables.get('binance_secret_key');",
            "const binanceTestnet = pm.collectionVariables.get('binance_testnet');",
            "",
            "// Log configuration (without exposing secrets)",
            "console.log('Binance API Key configured:', binanceApiKey !== 'your_binance_api_key_here');",
            "console.log('Binance Secret Key configured:', binanceSecretKey !== 'your_binance_secret_key_here');",
            "console.log('Using Testnet:', binanceTestnet);",
            "",
            "// Note: The Temporal service should read these from environment variables:",
            "// BINANCE_API_KEY, BINANCE_SECRET_KEY, BINANCE_TESTNET"
          ],
          "_lastExecutionId": "2fbc0816-8e88-4482-92ff-67a52c2528c5"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "e4577568-25bb-46ed-ba13-e214c247cf49",
          "type": "text/javascript",
          "exec": [
            "// Global test script - runs after every request",
            "",
            "// Check response time",
            "pm.test(\"Response time is acceptable\", function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(30000); // 30 seconds max",
            "});",
            "",
            "// Check content type",
            "pm.test(\"Content-Type is application/json\", function () {",
            "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
            "});",
            "",
            "// Log basic request info",
            "console.log(`${pm.info.requestName}: ${pm.response.status} (${pm.response.responseTime}ms)`);"
          ],
          "_lastExecutionId": "004afa1d-341d-4696-84dd-2a6497de5fae"
        }
      }
    ],
    "variable": [
      {
        "description": {
          "content": "Base URL for the Temporal API service",
          "type": "text/plain"
        },
        "type": "string",
        "value": "http://localhost:8088",
        "key": "base_url"
      },
      {
        "description": {
          "content": "Version of this Postman collection",
          "type": "text/plain"
        },
        "type": "string",
        "value": "1.1.0",
        "key": "collection_version"
      },
      {
        "description": {
          "content": "Timestamp when tests were last run",
          "type": "text/plain"
        },
        "type": "string",
        "value": "",
        "key": "test_timestamp"
      },
      {
        "description": {
          "content": "Binance API Key - Replace with your actual API key",
          "type": "text/plain"
        },
        "type": "string",
        "value": "Bjhd5FsunILOwVT1RXJiUxOhZt7MQ2jydKs2jspF11kB6tv1xY3EAmDJvrR4w8la",
        "key": "binance_api_key"
      },
      {
        "description": {
          "content": "Binance Secret Key - Replace with your actual secret key",
          "type": "text/plain"
        },
        "type": "string",
        "value": "LIWTukFxAjUH43qx7upKrADY1q8Ogc46OLMbeqgsv98noMvV7mWkGeseKtgUmbtC",
        "key": "binance_secret_key"
      },
      {
        "description": {
          "content": "Use Binance Testnet (true) or Mainnet (false)",
          "type": "text/plain"
        },
        "type": "string",
        "value": "true",
        "key": "binance_testnet"
      }
    ],
    "info": {
      "_postman_id": "c8f9e234-5d78-4c12-b3a4-8e2f1a9b7c3d",
      "name": "Afrikpay Gateway - Temporal Binance Workflows (Updated)",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Collection for testing Temporal Binance workflows and REST endpoints implemented in the Afrikpay Gateway project.\n\n**Base URL:** http://localhost:8088\n\n**Endpoints:**\n- GET /api/exchange/binance/v1/quotes - Get real-time crypto quotes\n- GET /api/exchange/binance/v1/orders - Get all orders (mock data)\n- POST /api/exchange/binance/v1/order - Place a new order\n- GET /api/exchange/binance/v1/order/{orderId} - Get order status\n- POST /api/workflow/v1/BinancePrice - Get single crypto price (legacy endpoint)\n\n**Created:** June 30, 2025\n**Version:** 1.1.0",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "39c2ccba-d7de-46a1-8314-3dc01b95a4c2",
    "values": []
  },
  "globals": {
    "id": "a2777836-fb4c-4da8-a9f8-89081a2ba342",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 19,
        "pending": 0,
        "failed": 2
      },
      "testScripts": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 5,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 4,
      "responseMin": 1,
      "responseMax": 13,
      "responseSd": 4.6475800154489,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1751287721880,
      "completed": 1751287721995
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 5,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bd846d08-5813-4083-a474-45ba9f6461cb",
          "httpRequestId": "f0c4efb7-7298-40d9-b523-302cb6c0edd7"
        },
        "item": {
          "id": "697290c8-a361-4ed2-a163-7a0d6b222245",
          "name": "Get Crypto Quotes",
          "request": {
            "url": {
              "path": [
                "api",
                "exchange",
                "binance",
                "v1",
                "quotes"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8883ecf4-03f8-458a-a154-912fbdf2c9e1",
                "type": "text/javascript",
                "exec": [
                  "// Test response status",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response structure",
                  "pm.test(\"Response has quotes array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quotes');",
                  "    pm.expect(jsonData.quotes).to.be.an('array');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});",
                  "",
                  "// Test quotes content",
                  "pm.test(\"Quotes contain required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.quotes && jsonData.quotes.length > 0) {",
                  "        const quote = jsonData.quotes[0];",
                  "        pm.expect(quote).to.have.property('symbol');",
                  "        pm.expect(quote).to.have.property('lastPrice');",
                  "        pm.expect(quote).to.have.property('askPrice');",
                  "        pm.expect(quote).to.have.property('bidPrice');",
                  "        pm.expect(quote).to.have.property('volume');",
                  "        pm.expect(quote).to.have.property('timestamp');",
                  "    }",
                  "});",
                  "",
                  "console.log('Quotes Response:', pm.response.json());"
                ],
                "_lastExecutionId": "8fccc2e0-64d0-46a0-93f8-a0f38f584c6d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8088",
            "path": [
              "api",
              "exchange",
              "binance",
              "v1",
              "quotes"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a0e31f2a-a342-44ca-975a-5124ad0cfeb6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8088",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "21ba59eb-29a5-499a-8f02-be58a76515d1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=UTF-8"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Date",
              "value": "Mon, 30 Jun 2025 12:48:41 GMT"
            },
            {
              "key": "Content-Length",
              "value": "589"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              113,
              117,
              111,
              116,
              101,
              115,
              34,
              58,
              91,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              66,
              84,
              67,
              85,
              83,
              68,
              84,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              49,
              48,
              55,
              56,
              51,
              56,
              46,
              52,
              54,
              34,
              44,
              34,
              97,
              115,
              107,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              49,
              48,
              55,
              56,
              52,
              48,
              46,
              53,
              48,
              34,
              44,
              34,
              98,
              105,
              100,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              49,
              48,
              55,
              56,
              51,
              53,
              46,
              50,
              53,
              34,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              34,
              58,
              34,
              49,
              50,
              51,
              52,
              46,
              53,
              54,
              55,
              56,
              57,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              49,
              55,
              53,
              49,
              50,
              56,
              55,
              55,
              50,
              49,
              57,
              48,
              52,
              34,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              69,
              84,
              72,
              85,
              83,
              68,
              84,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              51,
              57,
              52,
              53,
              46,
              54,
              55,
              34,
              44,
              34,
              97,
              115,
              107,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              51,
              57,
              52,
              54,
              46,
              49,
              50,
              34,
              44,
              34,
              98,
              105,
              100,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              51,
              57,
              52,
              53,
              46,
              50,
              51,
              34,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              34,
              58,
              34,
              57,
              56,
              55,
              54,
              46,
              53,
              52,
              51,
              50,
              49,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              49,
              55,
              53,
              49,
              50,
              56,
              55,
              55,
              50,
              49,
              57,
              48,
              52,
              34,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              65,
              68,
              65,
              85,
              83,
              68,
              84,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              48,
              46,
              56,
              57,
              50,
              53,
              34,
              44,
              34,
              97,
              115,
              107,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              48,
              46,
              56,
              57,
              51,
              48,
              34,
              44,
              34,
              98,
              105,
              100,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              48,
              46,
              56,
              57,
              50,
              48,
              34,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              34,
              58,
              34,
              49,
              53,
              54,
              55,
              56,
              46,
              57,
              56,
              55,
              54,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              49,
              55,
              53,
              49,
              50,
              56,
              55,
              55,
              50,
              49,
              57,
              48,
              52,
              34,
              125,
              44,
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              68,
              79,
              84,
              85,
              83,
              68,
              84,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              49,
              56,
              46,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              107,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              49,
              56,
              46,
              52,
              55,
              34,
              44,
              34,
              98,
              105,
              100,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              49,
              56,
              46,
              52,
              51,
              34,
              44,
              34,
              118,
              111,
              108,
              117,
              109,
              101,
              34,
              58,
              34,
              53,
              52,
              51,
              50,
              46,
              49,
              48,
              57,
              56,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              49,
              55,
              53,
              49,
              50,
              56,
              55,
              55,
              50,
              49,
              57,
              48,
              52,
              34,
              125,
              93,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              51,
              48,
              84,
              49,
              51,
              58,
              52,
              56,
              58,
              52,
              49,
              43,
              48,
              49,
              58,
              48,
              48,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 589
        },
        "id": "697290c8-a361-4ed2-a163-7a0d6b222245",
        "assertions": [
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has quotes array",
            "skipped": false
          },
          {
            "assertion": "Quotes contain required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3dc0c668-396b-41a4-bd51-33e8587f225f",
          "length": 5,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "64a4a4f3-4a2e-4203-a047-d0bf84143777"
        },
        "item": {
          "id": "043ab662-e220-4846-97c3-cbc827ebcdb6",
          "name": "Get All Orders",
          "request": {
            "url": {
              "path": [
                "api",
                "exchange",
                "binance",
                "v1",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "89f67cbf-12bb-465c-a14d-196096f2a868",
                "type": "text/javascript",
                "exec": [
                  "// Test response status",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response structure",
                  "pm.test(\"Response has orders array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('orders');",
                  "    pm.expect(jsonData.orders).to.be.an('array');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});",
                  "",
                  "console.log('Orders Response:', pm.response.json());"
                ],
                "_lastExecutionId": "7d36170e-c17c-4efd-bec3-9e916d4a5af8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8088",
            "path": [
              "api",
              "exchange",
              "binance",
              "v1",
              "orders"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "13f16a5f-237f-44a3-8a0d-7a9714f041a1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8088",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7fdcedd0-8634-4ce4-b400-59f4d4d06801",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=UTF-8"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Date",
              "value": "Mon, 30 Jun 2025 12:48:41 GMT"
            },
            {
              "key": "Content-Length",
              "value": "469"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              111,
              114,
              100,
              101,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              111,
              114,
              100,
              101,
              114,
              73,
              100,
              34,
              58,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              44,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              66,
              84,
              67,
              85,
              83,
              68,
              84,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              70,
              73,
              76,
              76,
              69,
              68,
              34,
              44,
              34,
              111,
              114,
              105,
              103,
              81,
              116,
              121,
              34,
              58,
              34,
              48,
              46,
              48,
              48,
              49,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              49,
              48,
              55,
              56,
              48,
              48,
              46,
              48,
              48,
              34,
              44,
              34,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              100,
              81,
              116,
              121,
              34,
              58,
              34,
              48,
              46,
              48,
              48,
              49,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              34,
              58,
              34,
              49,
              55,
              53,
              49,
              50,
              56,
              55,
              55,
              50,
              49,
              57,
              50,
              56,
              34,
              125,
              44,
              123,
              34,
              111,
              114,
              100,
              101,
              114,
              73,
              100,
              34,
              58,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              57,
              44,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              69,
              84,
              72,
              85,
              83,
              68,
              84,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              80,
              65,
              82,
              84,
              73,
              65,
              76,
              76,
              89,
              95,
              70,
              73,
              76,
              76,
              69,
              68,
              34,
              44,
              34,
              111,
              114,
              105,
              103,
              81,
              116,
              121,
              34,
              58,
              34,
              48,
              46,
              53,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              51,
              57,
              52,
              48,
              46,
              48,
              48,
              34,
              44,
              34,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              100,
              81,
              116,
              121,
              34,
              58,
              34,
              48,
              46,
              50,
              53,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              34,
              58,
              34,
              49,
              55,
              53,
              49,
              50,
              56,
              55,
              55,
              50,
              49,
              57,
              50,
              56,
              34,
              125,
              44,
              123,
              34,
              111,
              114,
              100,
              101,
              114,
              73,
              100,
              34,
              58,
              49,
              50,
              51,
              52,
              53,
              54,
              56,
              48,
              44,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              65,
              68,
              65,
              85,
              83,
              68,
              84,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              78,
              69,
              87,
              34,
              44,
              34,
              111,
              114,
              105,
              103,
              81,
              116,
              121,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              48,
              46,
              56,
              57,
              48,
              48,
              34,
              44,
              34,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              100,
              81,
              116,
              121,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              34,
              58,
              34,
              49,
              55,
              53,
              49,
              50,
              56,
              55,
              55,
              50,
              49,
              57,
              50,
              56,
              34,
              125,
              93,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              51,
              48,
              84,
              49,
              51,
              58,
              52,
              56,
              58,
              52,
              49,
              43,
              48,
              49,
              58,
              48,
              48,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 469
        },
        "id": "043ab662-e220-4846-97c3-cbc827ebcdb6",
        "assertions": [
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has orders array",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b6b0e573-7c1a-40b0-bffe-7bd37932dbd9",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "793e9f26-2d14-44e2-834e-d6bd4492f69c"
        },
        "item": {
          "id": "f5d72f83-7ab0-499a-a566-c3a5139d1b1e",
          "name": "Place Order",
          "request": {
            "description": {
              "content": "Places a new order on Binance exchange using Temporal workflow.\n\n**Input:** OrderRequest with symbol, side, type, quantity\n**Output:** OrderResponse with order details or error\n\n**Workflow:** BinancePlaceOrderWorkflow\n**Activity:** PlaceOrder\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "exchange",
                "binance",
                "v1",
                "order"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"symbol\": \"BTCUSDT\",\n  \"side\": \"BUY\",\n  \"type\": \"MARKET\",\n  \"quantity\": 0.001\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0dde370-bb4c-4aaa-85b2-74ce0834e80e",
                "type": "text/javascript",
                "exec": [
                  "// Test response status (may be 200 or 500 depending on API keys)",
                  "pm.test(\"Response received\", function () {",
                  "    pm.expect([200, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "// Test response structure on success",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has order information\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('orderId');",
                  "        pm.expect(jsonData).to.have.property('symbol');",
                  "        pm.expect(jsonData).to.have.property('status');",
                  "        pm.expect(jsonData).to.have.property('side');",
                  "        pm.expect(jsonData).to.have.property('type');",
                  "        pm.expect(jsonData).to.have.property('quantity');",
                  "        pm.expect(jsonData).to.have.property('timestamp');",
                  "    });",
                  "}",
                  "",
                  "console.log('Place Order Response:', pm.response.json());"
                ],
                "_lastExecutionId": "edd9e420-85ad-44a3-874a-19bcb1bac494"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Places a new order on Binance exchange using Temporal workflow.\n\n**Input:** OrderRequest with symbol, side, type, quantity\n**Output:** OrderResponse with order details or error\n\n**Workflow:** BinancePlaceOrderWorkflow\n**Activity:** PlaceOrder\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8088",
            "path": [
              "api",
              "exchange",
              "binance",
              "v1",
              "order"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1b4a2fd0-96c4-4ed0-93aa-a0c0fb40ef3f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8088",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "83",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"symbol\": \"BTCUSDT\",\n  \"side\": \"BUY\",\n  \"type\": \"MARKET\",\n  \"quantity\": 0.001\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "bc6c88b4-b3e7-42b9-8847-ce6292609862",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=UTF-8"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Date",
              "value": "Mon, 30 Jun 2025 12:48:41 GMT"
            },
            {
              "key": "Content-Length",
              "value": "24"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 24
        },
        "id": "f5d72f83-7ab0-499a-a566-c3a5139d1b1e",
        "assertions": [
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "Response received",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response received",
              "message": "expected [ 200, 500 ] to include 404",
              "stack": "AssertionError: expected [ 200, 500 ] to include 404\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "aa2c42df-c96f-4833-8f6c-243508c0bb26",
          "length": 5,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "17ba4a81-5cca-417e-b739-cc6caeebf60b"
        },
        "item": {
          "id": "a87a8d24-ed86-4710-9608-57c1658081c0",
          "name": "Get Order Status",
          "request": {
            "description": {
              "content": "Retrieves the status of a specific order by orderId.\n\n**Input:** orderId as path parameter, symbol as query parameter\n**Output:** OrderResponse with current order status or error\n\n**Workflow:** BinanceGetOrderStatusWorkflow\n**Activity:** GetOrderStatus\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "exchange",
                "binance",
                "v1",
                "order",
                "123456"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "symbol",
                  "value": "BTCUSDT"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "508d1dc1-2bb4-4499-9f81-fc0d2fa56cab",
                "type": "text/javascript",
                "exec": [
                  "// Test response status (may be 200 or 500 depending on API keys)",
                  "pm.test(\"Response received\", function () {",
                  "    pm.expect([200, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "// Test response structure on success",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has order status\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('orderId');",
                  "        pm.expect(jsonData).to.have.property('symbol');",
                  "        pm.expect(jsonData).to.have.property('status');",
                  "        pm.expect(jsonData).to.have.property('side');",
                  "        pm.expect(jsonData).to.have.property('type');",
                  "        pm.expect(jsonData).to.have.property('quantity');",
                  "        pm.expect(jsonData).to.have.property('timestamp');",
                  "    });",
                  "}",
                  "",
                  "console.log('Order Status Response:', pm.response.json());"
                ],
                "_lastExecutionId": "4d551212-4810-4d27-bcae-7ffcb140b4b0"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Retrieves the status of a specific order by orderId.\n\n**Input:** orderId as path parameter, symbol as query parameter\n**Output:** OrderResponse with current order status or error\n\n**Workflow:** BinanceGetOrderStatusWorkflow\n**Activity:** GetOrderStatus\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8088",
            "path": [
              "api",
              "exchange",
              "binance",
              "v1",
              "order",
              "123456"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "symbol",
                "value": "BTCUSDT"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c87f2ca1-d8b7-4585-bd3b-357ff44647b5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8088",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e4d2f120-5ca5-45ee-9405-1a38a9ba0e1e",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=UTF-8"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Date",
              "value": "Mon, 30 Jun 2025 12:48:41 GMT"
            },
            {
              "key": "Content-Length",
              "value": "24"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 24
        },
        "id": "a87a8d24-ed86-4710-9608-57c1658081c0",
        "assertions": [
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "Response received",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response received",
              "message": "expected [ 200, 500 ] to include 404",
              "stack": "AssertionError: expected [ 200, 500 ] to include 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "58d680b5-0b26-4c01-b4d2-af9fb8eb35a2",
          "length": 5,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a0ffc35e-7f66-4239-b8b3-b8130021ae54"
        },
        "item": {
          "id": "9f376ff2-5a83-4397-9dc0-1a2bbbba5941",
          "name": "Get Binance Price (Legacy)",
          "request": {
            "url": {
              "path": [
                "api",
                "workflow",
                "v1",
                "BinancePrice"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "\"BTCUSDT\"",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "821847d0-d64a-4c3e-a5a2-b98608808e33",
                "type": "text/javascript",
                "exec": [
                  "// Test response status",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Test response structure",
                  "pm.test(\"Response has price information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('symbol');",
                  "    pm.expect(jsonData).to.have.property('price');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "});",
                  "",
                  "console.log('Price Response:', pm.response.json());"
                ],
                "_lastExecutionId": "36c77639-fa03-41ea-8dd8-1c215018a71f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8088",
            "path": [
              "api",
              "workflow",
              "v1",
              "BinancePrice"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "99860b65-5631-48e3-a4ec-13b4192721fb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8088",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "9",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "\"BTCUSDT\"",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "1caa6dcf-8074-4a56-bec2-a8f76d275f9d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json; charset=UTF-8"
            },
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Date",
              "value": "Mon, 30 Jun 2025 12:48:41 GMT"
            },
            {
              "key": "Content-Length",
              "value": "94"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              121,
              109,
              98,
              111,
              108,
              34,
              58,
              34,
              66,
              84,
              67,
              85,
              83,
              68,
              84,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              48,
              55,
              56,
              51,
              56,
              46,
              52,
              54,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              54,
              45,
              51,
              48,
              84,
              49,
              51,
              58,
              52,
              56,
              58,
              52,
              49,
              43,
              48,
              49,
              58,
              48,
              48,
              34,
              44,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 94
        },
        "id": "9f376ff2-5a83-4397-9dc0-1a2bbbba5941",
        "assertions": [
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Content-Type is application/json",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has price information",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1200
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response received",
          "message": "expected [ 200, 500 ] to include 404",
          "stack": "AssertionError: expected [ 200, 500 ] to include 404\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "e98a1138ac7d00df74beabe202da9954",
          "id": "989b11d0-9d8f-4efa-84e1-9efc4b88d766",
          "timestamp": 1751287721960,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f5d72f83-7ab0-499a-a566-c3a5139d1b1e",
          "name": "Place Order",
          "request": {
            "description": {
              "content": "Places a new order on Binance exchange using Temporal workflow.\n\n**Input:** OrderRequest with symbol, side, type, quantity\n**Output:** OrderResponse with order details or error\n\n**Workflow:** BinancePlaceOrderWorkflow\n**Activity:** PlaceOrder\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "exchange",
                "binance",
                "v1",
                "order"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"symbol\": \"BTCUSDT\",\n  \"side\": \"BUY\",\n  \"type\": \"MARKET\",\n  \"quantity\": 0.001\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0dde370-bb4c-4aaa-85b2-74ce0834e80e",
                "type": "text/javascript",
                "exec": [
                  "// Test response status (may be 200 or 500 depending on API keys)",
                  "pm.test(\"Response received\", function () {",
                  "    pm.expect([200, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "// Test response structure on success",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has order information\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('orderId');",
                  "        pm.expect(jsonData).to.have.property('symbol');",
                  "        pm.expect(jsonData).to.have.property('status');",
                  "        pm.expect(jsonData).to.have.property('side');",
                  "        pm.expect(jsonData).to.have.property('type');",
                  "        pm.expect(jsonData).to.have.property('quantity');",
                  "        pm.expect(jsonData).to.have.property('timestamp');",
                  "    });",
                  "}",
                  "",
                  "console.log('Place Order Response:', pm.response.json());"
                ],
                "_lastExecutionId": "edd9e420-85ad-44a3-874a-19bcb1bac494"
              }
            }
          ]
        },
        "parent": {
          "id": "197201dc-7293-4155-b401-7dbbbbfabdf3",
          "name": "Binance REST Endpoints",
          "description": {
            "content": "New REST endpoints for Binance operations. These endpoints use Temporal workflows internally for robust execution.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "697290c8-a361-4ed2-a163-7a0d6b222245",
              "name": "Get Crypto Quotes",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "exchange",
                    "binance",
                    "v1",
                    "quotes"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8883ecf4-03f8-458a-a154-912fbdf2c9e1",
                    "type": "text/javascript",
                    "exec": [
                      "// Test response status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Test response structure",
                      "pm.test(\"Response has quotes array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quotes');",
                      "    pm.expect(jsonData.quotes).to.be.an('array');",
                      "    pm.expect(jsonData).to.have.property('timestamp');",
                      "});",
                      "",
                      "// Test quotes content",
                      "pm.test(\"Quotes contain required fields\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.quotes && jsonData.quotes.length > 0) {",
                      "        const quote = jsonData.quotes[0];",
                      "        pm.expect(quote).to.have.property('symbol');",
                      "        pm.expect(quote).to.have.property('lastPrice');",
                      "        pm.expect(quote).to.have.property('askPrice');",
                      "        pm.expect(quote).to.have.property('bidPrice');",
                      "        pm.expect(quote).to.have.property('volume');",
                      "        pm.expect(quote).to.have.property('timestamp');",
                      "    }",
                      "});",
                      "",
                      "console.log('Quotes Response:', pm.response.json());"
                    ],
                    "_lastExecutionId": "8fccc2e0-64d0-46a0-93f8-a0f38f584c6d"
                  }
                }
              ]
            },
            {
              "id": "043ab662-e220-4846-97c3-cbc827ebcdb6",
              "name": "Get All Orders",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "exchange",
                    "binance",
                    "v1",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "89f67cbf-12bb-465c-a14d-196096f2a868",
                    "type": "text/javascript",
                    "exec": [
                      "// Test response status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Test response structure",
                      "pm.test(\"Response has orders array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('orders');",
                      "    pm.expect(jsonData.orders).to.be.an('array');",
                      "    pm.expect(jsonData).to.have.property('timestamp');",
                      "});",
                      "",
                      "console.log('Orders Response:', pm.response.json());"
                    ],
                    "_lastExecutionId": "7d36170e-c17c-4efd-bec3-9e916d4a5af8"
                  }
                }
              ]
            },
            {
              "id": "f5d72f83-7ab0-499a-a566-c3a5139d1b1e",
              "name": "Place Order",
              "request": {
                "description": {
                  "content": "Places a new order on Binance exchange using Temporal workflow.\n\n**Input:** OrderRequest with symbol, side, type, quantity\n**Output:** OrderResponse with order details or error\n\n**Workflow:** BinancePlaceOrderWorkflow\n**Activity:** PlaceOrder\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "exchange",
                    "binance",
                    "v1",
                    "order"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"symbol\": \"BTCUSDT\",\n  \"side\": \"BUY\",\n  \"type\": \"MARKET\",\n  \"quantity\": 0.001\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0dde370-bb4c-4aaa-85b2-74ce0834e80e",
                    "type": "text/javascript",
                    "exec": [
                      "// Test response status (may be 200 or 500 depending on API keys)",
                      "pm.test(\"Response received\", function () {",
                      "    pm.expect([200, 500]).to.include(pm.response.code);",
                      "});",
                      "",
                      "// Test response structure on success",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response has order information\", function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('orderId');",
                      "        pm.expect(jsonData).to.have.property('symbol');",
                      "        pm.expect(jsonData).to.have.property('status');",
                      "        pm.expect(jsonData).to.have.property('side');",
                      "        pm.expect(jsonData).to.have.property('type');",
                      "        pm.expect(jsonData).to.have.property('quantity');",
                      "        pm.expect(jsonData).to.have.property('timestamp');",
                      "    });",
                      "}",
                      "",
                      "console.log('Place Order Response:', pm.response.json());"
                    ],
                    "_lastExecutionId": "edd9e420-85ad-44a3-874a-19bcb1bac494"
                  }
                }
              ]
            },
            {
              "id": "a87a8d24-ed86-4710-9608-57c1658081c0",
              "name": "Get Order Status",
              "request": {
                "description": {
                  "content": "Retrieves the status of a specific order by orderId.\n\n**Input:** orderId as path parameter, symbol as query parameter\n**Output:** OrderResponse with current order status or error\n\n**Workflow:** BinanceGetOrderStatusWorkflow\n**Activity:** GetOrderStatus\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "exchange",
                    "binance",
                    "v1",
                    "order",
                    "123456"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "symbol",
                      "value": "BTCUSDT"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "508d1dc1-2bb4-4499-9f81-fc0d2fa56cab",
                    "type": "text/javascript",
                    "exec": [
                      "// Test response status (may be 200 or 500 depending on API keys)",
                      "pm.test(\"Response received\", function () {",
                      "    pm.expect([200, 500]).to.include(pm.response.code);",
                      "});",
                      "",
                      "// Test response structure on success",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response has order status\", function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('orderId');",
                      "        pm.expect(jsonData).to.have.property('symbol');",
                      "        pm.expect(jsonData).to.have.property('status');",
                      "        pm.expect(jsonData).to.have.property('side');",
                      "        pm.expect(jsonData).to.have.property('type');",
                      "        pm.expect(jsonData).to.have.property('quantity');",
                      "        pm.expect(jsonData).to.have.property('timestamp');",
                      "    });",
                      "}",
                      "",
                      "console.log('Order Status Response:', pm.response.json());"
                    ],
                    "_lastExecutionId": "4d551212-4810-4d27-bcae-7ffcb140b4b0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b6b0e573-7c1a-40b0-bffe-7bd37932dbd9",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "793e9f26-2d14-44e2-834e-d6bd4492f69c",
          "scriptId": "f0dde370-bb4c-4aaa-85b2-74ce0834e80e",
          "execution": "edd9e420-85ad-44a3-874a-19bcb1bac494"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response received",
          "message": "expected [ 200, 500 ] to include 404",
          "stack": "AssertionError: expected [ 200, 500 ] to include 404\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "5ffcbc6d25bb5328170202407fc577dc",
          "id": "4d10e008-592f-4d13-9784-3d1cef27de7d",
          "timestamp": 1751287721976,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a87a8d24-ed86-4710-9608-57c1658081c0",
          "name": "Get Order Status",
          "request": {
            "description": {
              "content": "Retrieves the status of a specific order by orderId.\n\n**Input:** orderId as path parameter, symbol as query parameter\n**Output:** OrderResponse with current order status or error\n\n**Workflow:** BinanceGetOrderStatusWorkflow\n**Activity:** GetOrderStatus\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "api",
                "exchange",
                "binance",
                "v1",
                "order",
                "123456"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "symbol",
                  "value": "BTCUSDT"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "508d1dc1-2bb4-4499-9f81-fc0d2fa56cab",
                "type": "text/javascript",
                "exec": [
                  "// Test response status (may be 200 or 500 depending on API keys)",
                  "pm.test(\"Response received\", function () {",
                  "    pm.expect([200, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "// Test response structure on success",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response has order status\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('orderId');",
                  "        pm.expect(jsonData).to.have.property('symbol');",
                  "        pm.expect(jsonData).to.have.property('status');",
                  "        pm.expect(jsonData).to.have.property('side');",
                  "        pm.expect(jsonData).to.have.property('type');",
                  "        pm.expect(jsonData).to.have.property('quantity');",
                  "        pm.expect(jsonData).to.have.property('timestamp');",
                  "    });",
                  "}",
                  "",
                  "console.log('Order Status Response:', pm.response.json());"
                ],
                "_lastExecutionId": "4d551212-4810-4d27-bcae-7ffcb140b4b0"
              }
            }
          ]
        },
        "parent": {
          "id": "197201dc-7293-4155-b401-7dbbbbfabdf3",
          "name": "Binance REST Endpoints",
          "description": {
            "content": "New REST endpoints for Binance operations. These endpoints use Temporal workflows internally for robust execution.",
            "type": "text/plain"
          },
          "item": [
            {
              "id": "697290c8-a361-4ed2-a163-7a0d6b222245",
              "name": "Get Crypto Quotes",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "exchange",
                    "binance",
                    "v1",
                    "quotes"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8883ecf4-03f8-458a-a154-912fbdf2c9e1",
                    "type": "text/javascript",
                    "exec": [
                      "// Test response status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Test response structure",
                      "pm.test(\"Response has quotes array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quotes');",
                      "    pm.expect(jsonData.quotes).to.be.an('array');",
                      "    pm.expect(jsonData).to.have.property('timestamp');",
                      "});",
                      "",
                      "// Test quotes content",
                      "pm.test(\"Quotes contain required fields\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.quotes && jsonData.quotes.length > 0) {",
                      "        const quote = jsonData.quotes[0];",
                      "        pm.expect(quote).to.have.property('symbol');",
                      "        pm.expect(quote).to.have.property('lastPrice');",
                      "        pm.expect(quote).to.have.property('askPrice');",
                      "        pm.expect(quote).to.have.property('bidPrice');",
                      "        pm.expect(quote).to.have.property('volume');",
                      "        pm.expect(quote).to.have.property('timestamp');",
                      "    }",
                      "});",
                      "",
                      "console.log('Quotes Response:', pm.response.json());"
                    ],
                    "_lastExecutionId": "8fccc2e0-64d0-46a0-93f8-a0f38f584c6d"
                  }
                }
              ]
            },
            {
              "id": "043ab662-e220-4846-97c3-cbc827ebcdb6",
              "name": "Get All Orders",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "exchange",
                    "binance",
                    "v1",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "89f67cbf-12bb-465c-a14d-196096f2a868",
                    "type": "text/javascript",
                    "exec": [
                      "// Test response status",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// Test response structure",
                      "pm.test(\"Response has orders array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('orders');",
                      "    pm.expect(jsonData.orders).to.be.an('array');",
                      "    pm.expect(jsonData).to.have.property('timestamp');",
                      "});",
                      "",
                      "console.log('Orders Response:', pm.response.json());"
                    ],
                    "_lastExecutionId": "7d36170e-c17c-4efd-bec3-9e916d4a5af8"
                  }
                }
              ]
            },
            {
              "id": "f5d72f83-7ab0-499a-a566-c3a5139d1b1e",
              "name": "Place Order",
              "request": {
                "description": {
                  "content": "Places a new order on Binance exchange using Temporal workflow.\n\n**Input:** OrderRequest with symbol, side, type, quantity\n**Output:** OrderResponse with order details or error\n\n**Workflow:** BinancePlaceOrderWorkflow\n**Activity:** PlaceOrder\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "exchange",
                    "binance",
                    "v1",
                    "order"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"symbol\": \"BTCUSDT\",\n  \"side\": \"BUY\",\n  \"type\": \"MARKET\",\n  \"quantity\": 0.001\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0dde370-bb4c-4aaa-85b2-74ce0834e80e",
                    "type": "text/javascript",
                    "exec": [
                      "// Test response status (may be 200 or 500 depending on API keys)",
                      "pm.test(\"Response received\", function () {",
                      "    pm.expect([200, 500]).to.include(pm.response.code);",
                      "});",
                      "",
                      "// Test response structure on success",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response has order information\", function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('orderId');",
                      "        pm.expect(jsonData).to.have.property('symbol');",
                      "        pm.expect(jsonData).to.have.property('status');",
                      "        pm.expect(jsonData).to.have.property('side');",
                      "        pm.expect(jsonData).to.have.property('type');",
                      "        pm.expect(jsonData).to.have.property('quantity');",
                      "        pm.expect(jsonData).to.have.property('timestamp');",
                      "    });",
                      "}",
                      "",
                      "console.log('Place Order Response:', pm.response.json());"
                    ],
                    "_lastExecutionId": "edd9e420-85ad-44a3-874a-19bcb1bac494"
                  }
                }
              ]
            },
            {
              "id": "a87a8d24-ed86-4710-9608-57c1658081c0",
              "name": "Get Order Status",
              "request": {
                "description": {
                  "content": "Retrieves the status of a specific order by orderId.\n\n**Input:** orderId as path parameter, symbol as query parameter\n**Output:** OrderResponse with current order status or error\n\n**Workflow:** BinanceGetOrderStatusWorkflow\n**Activity:** GetOrderStatus\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "api",
                    "exchange",
                    "binance",
                    "v1",
                    "order",
                    "123456"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "symbol",
                      "value": "BTCUSDT"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "508d1dc1-2bb4-4499-9f81-fc0d2fa56cab",
                    "type": "text/javascript",
                    "exec": [
                      "// Test response status (may be 200 or 500 depending on API keys)",
                      "pm.test(\"Response received\", function () {",
                      "    pm.expect([200, 500]).to.include(pm.response.code);",
                      "});",
                      "",
                      "// Test response structure on success",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response has order status\", function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('orderId');",
                      "        pm.expect(jsonData).to.have.property('symbol');",
                      "        pm.expect(jsonData).to.have.property('status');",
                      "        pm.expect(jsonData).to.have.property('side');",
                      "        pm.expect(jsonData).to.have.property('type');",
                      "        pm.expect(jsonData).to.have.property('quantity');",
                      "        pm.expect(jsonData).to.have.property('timestamp');",
                      "    });",
                      "}",
                      "",
                      "console.log('Order Status Response:', pm.response.json());"
                    ],
                    "_lastExecutionId": "4d551212-4810-4d27-bcae-7ffcb140b4b0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "aa2c42df-c96f-4833-8f6c-243508c0bb26",
          "length": 5,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "17ba4a81-5cca-417e-b739-cc6caeebf60b",
          "scriptId": "508d1dc1-2bb4-4499-9f81-fc0d2fa56cab",
          "execution": "4d551212-4810-4d27-bcae-7ffcb140b4b0"
        }
      }
    ],
    "error": null
  }
}