{
	"info": {
		"_postman_id": "c8f9e234-5d78-4c12-b3a4-8e2f1a9b7c3d",
		"name": "Afrikpay Gateway - Temporal Binance Workflows (Updated)",
		"description": "Collection for testing Temporal Binance workflows and REST endpoints implemented in the Afrikpay Gateway project.\n\n**Base URL:** http://localhost:8088\n\n**Endpoints:**\n- GET /api/exchange/binance/v1/quotes - Get real-time crypto quotes\n- GET /api/exchange/binance/v1/orders - Get all orders (mock data)\n- POST /api/exchange/binance/v1/order - Place a new order\n- GET /api/exchange/binance/v1/order/{orderId} - Get order status\n- POST /api/workflow/v1/BinancePrice - Get single crypto price (legacy endpoint)\n\n**Created:** June 30, 2025\n**Version:** 1.1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Binance REST Endpoints",
			"item": [
				{
					"name": "Get Crypto Quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has quotes array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('quotes');",
									"    pm.expect(jsonData.quotes).to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});",
									"",
									"// Test quotes content",
									"pm.test(\"Quotes contain required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.quotes && jsonData.quotes.length > 0) {",
									"        const quote = jsonData.quotes[0];",
									"        pm.expect(quote).to.have.property('symbol');",
									"        pm.expect(quote).to.have.property('lastPrice');",
									"        pm.expect(quote).to.have.property('askPrice');",
									"        pm.expect(quote).to.have.property('bidPrice');",
									"        pm.expect(quote).to.have.property('volume');",
									"        pm.expect(quote).to.have.property('timestamp');",
									"    }",
									"});",
									"",
									"console.log('Quotes Response:', pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/exchange/binance/v1/quotes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"exchange",
								"binance",
								"v1",
								"quotes"
							]
						}
					}
				},
				{
					"name": "Get All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has orders array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('orders');",
									"    pm.expect(jsonData.orders).to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});",
									"",
									"console.log('Orders Response:', pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/exchange/binance/v1/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"exchange",
								"binance",
								"v1",
								"orders"
							]
						}
					}
				},
				{
					"name": "Place Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status (should be 200 for successful order placement)",
									"pm.test(\"Response received\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Test response structure on success",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response has order information\", function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('orderId');",
									"        pm.expect(jsonData).to.have.property('symbol');",
									"        pm.expect(jsonData).to.have.property('status');",
									"        pm.expect(jsonData).to.have.property('origQty');",
									"        pm.expect(jsonData).to.have.property('success');",
									"        pm.expect(jsonData).to.have.property('time');",
									"    });",
									"}",
									"",
									"console.log('Place Order Response:', pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"symbol\": \"BTCUSDT\",\n  \"side\": \"BUY\",\n  \"type\": \"MARKET\",\n  \"quantity\": 0.001\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/exchange/binance/v1/order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"exchange",
								"binance",
								"v1",
								"order"
							]
						},
						"description": "Places a new order on Binance exchange using Temporal workflow.\n\n**Input:** OrderRequest with symbol, side, type, quantity\n**Output:** OrderResponse with order details or error\n\n**Workflow:** BinancePlaceOrderWorkflow\n**Activity:** PlaceOrder\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials."
					}
				},
				{
					"name": "Get Order Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status (should be 200 for successful order status)",
									"pm.test(\"Response received\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Test response structure on success",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response has order status\", function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('orderId');",
									"        pm.expect(jsonData).to.have.property('symbol');",
									"        pm.expect(jsonData).to.have.property('status');",
									"        pm.expect(jsonData).to.have.property('origQty');",
									"        pm.expect(jsonData).to.have.property('price');",
									"        pm.expect(jsonData).to.have.property('executedQty');",
									"        pm.expect(jsonData).to.have.property('time');",
									"    });",
									"}",
									"",
									"console.log('Order Status Response:', pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/exchange/binance/v1/order/123456?symbol=BTCUSDT",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"exchange",
								"binance",
								"v1",
								"order",
								"123456"
							],
							"query": [
								{
									"key": "symbol",
									"value": "BTCUSDT"
								}
							]
						},
						"description": "Retrieves the status of a specific order by orderId.\n\n**Input:** orderId as path parameter, symbol as query parameter\n**Output:** OrderResponse with current order status or error\n\n**Workflow:** BinanceGetOrderStatusWorkflow\n**Activity:** GetOrderStatus\n\n**Note:** Requires valid Binance API keys to work. Will timeout without proper credentials."
					}
				}
			],
			"description": "New REST endpoints for Binance operations. These endpoints use Temporal workflows internally for robust execution."
		},
		{
			"name": "Legacy Workflow Endpoints",
			"item": [
				{
					"name": "Get Binance Price (Legacy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has price information\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('symbol');",
									"    pm.expect(jsonData).to.have.property('price');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"    pm.expect(jsonData).to.have.property('success');",
									"});",
									"",
									"console.log('Price Response:', pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"BTCUSDT\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/workflow/v1/BinancePrice",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"workflow",
								"v1",
								"BinancePrice"
							]
						}
					}
				}
			],
			"description": "Legacy workflow endpoints using POST method. These maintain backward compatibility with the original workflow implementation."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Testing Temporal Binance Workflows...');",
					"",
					"// Set collection variables",
					"pm.collectionVariables.set('base_url', 'http://localhost:8088');",
					"pm.collectionVariables.set('collection_version', '1.1.0');",
					"pm.collectionVariables.set('test_timestamp', new Date().toISOString());",
					"",
					"// Set Binance API keys as environment variables (for service to read)",
					"// ⚠️ IMPORTANT: Replace these with your actual Binance API keys",
					"const binanceApiKey = pm.collectionVariables.get('binance_api_key');",
					"const binanceSecretKey = pm.collectionVariables.get('binance_secret_key');",
					"const binanceTestnet = pm.collectionVariables.get('binance_testnet');",
					"",
					"// Log configuration (without exposing secrets)",
					"console.log('Binance API Key configured:', binanceApiKey !== 'your_binance_api_key_here');",
					"console.log('Binance Secret Key configured:', binanceSecretKey !== 'your_binance_secret_key_here');",
					"console.log('Using Testnet:', binanceTestnet);",
					"",
					"// Note: The Temporal service should read these from environment variables:",
					"// BINANCE_API_KEY, BINANCE_SECRET_KEY, BINANCE_TESTNET"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script - runs after every request",
					"",
					"// Check response time",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(30000); // 30 seconds max",
					"});",
					"",
					"// Check content type",
					"pm.test(\"Content-Type is application/json\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});",
					"",
					"// Log basic request info",
					"console.log(`${pm.info.requestName}: ${pm.response.status} (${pm.response.responseTime}ms)`);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8088",
			"type": "string",
			"description": "Base URL for the Temporal API service"
		},
		{
			"key": "collection_version",
			"value": "1.1.0",
			"type": "string",
			"description": "Version of this Postman collection"
		},
		{
			"key": "test_timestamp",
			"value": "",
			"type": "string",
			"description": "Timestamp when tests were last run"
		},
		{
			"key": "binance_api_key",
			"value": "Bjhd5FsunILOwVT1RXJiUxOhZt7MQ2jydKs2jspF11kB6tv1xY3EAmDJvrR4w8la",
			"type": "string",
			"description": "Binance API Key - Replace with your actual API key"
		},
		{
			"key": "binance_secret_key",
			"value": "LIWTukFxAjUH43qx7upKrADY1q8Ogc46OLMbeqgsv98noMvV7mWkGeseKtgUmbtC",
			"type": "string",
			"description": "Binance Secret Key - Replace with your actual secret key"
		},
		{
			"key": "binance_testnet",
			"value": "true",
			"type": "string",
			"description": "Use Binance Testnet (true) or Mainnet (false)"
		}
	]
}
