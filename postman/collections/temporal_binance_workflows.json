{
	"info": {
		"_postman_id": "c8f9e234-5d78-4c12-b3a4-8e2f1a9b7c3d",
		"name": "Afrikpay Gateway - Temporal Binance Workflows",
		"description": "Collection for testing Temporal Binance workflows and REST endpoints implemented in the Afrikpay Gateway project.\n\n**Base URL:** http://localhost:8088\n\n**Endpoints:**\n- GET /api/exchange/binance/v1/quotes - Get real-time crypto quotes\n- GET /api/exchange/binance/v1/orders - Get all orders (mock data)\n- POST /api/workflow/v1/BinancePrice - Get single crypto price (legacy endpoint)\n\n**Created:** June 30, 2025\n**Version:** 1.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Binance REST Endpoints",
			"item": [
				{
					"name": "Get Crypto Quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has quotes array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('quotes');",
									"    pm.expect(jsonData.quotes).to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});",
									"",
									"// Test quotes content",
									"pm.test(\"Quotes contain required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.quotes && jsonData.quotes.length > 0) {",
									"        const quote = jsonData.quotes[0];",
									"        pm.expect(quote).to.have.property('symbol');",
									"        pm.expect(quote).to.have.property('lastPrice');",
									"        pm.expect(quote).to.have.property('askPrice');",
									"        pm.expect(quote).to.have.property('bidPrice');",
									"        pm.expect(quote).to.have.property('volume');",
									"        pm.expect(quote).to.have.property('timestamp');",
									"    }",
									"});",
									"",
									"// Test specific symbols",
									"pm.test(\"Contains expected crypto symbols\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.quotes) {",
									"        const symbols = jsonData.quotes.map(q => q.symbol);",
									"        pm.expect(symbols).to.include('BTCUSDT');",
									"        pm.expect(symbols).to.include('ETHUSDT');",
									"    }",
									"});",
									"",
									"// Log response for debugging",
									"console.log('Quotes Response:', pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/exchange/binance/v1/quotes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"exchange",
								"binance",
								"v1",
								"quotes"
							]
						},
						"description": "Retrieves real-time cryptocurrency quotes from Binance.\n\n**Expected Response:**\n- Array of quotes with symbol, prices, volume, and timestamp\n- Supports: BTCUSDT, ETHUSDT, ADAUSDT, DOTUSDT\n\n**Workflow:** BinanceQuotesWorkflow\n**Activity:** GetQuotes"
					},
					"response": [
						{
							"name": "Success - Crypto Quotes",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8088/api/exchange/binance/v1/quotes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"exchange",
										"binance",
										"v1",
										"quotes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"quotes\": [\n    {\n      \"askPrice\": 107838.47,\n      \"bidPrice\": 107838.46,\n      \"lastPrice\": 107838.46,\n      \"symbol\": \"BTCUSDT\",\n      \"timestamp\": \"2025-06-30T12:48:48.720735+01:00\",\n      \"volume\": 2197.11557\n    },\n    {\n      \"askPrice\": 2464.8,\n      \"bidPrice\": 2464.79,\n      \"lastPrice\": 2464.78,\n      \"symbol\": \"ETHUSDT\",\n      \"timestamp\": \"2025-06-30T12:48:48.720736+01:00\",\n      \"volume\": 137508.0102\n    },\n    {\n      \"askPrice\": 0.5649,\n      \"bidPrice\": 0.5648,\n      \"lastPrice\": 0.5648,\n      \"symbol\": \"ADAUSDT\",\n      \"timestamp\": \"2025-06-30T12:48:48.720757+01:00\",\n      \"volume\": 90258229.5\n    },\n    {\n      \"askPrice\": 3.429,\n      \"bidPrice\": 3.428,\n      \"lastPrice\": 3.428,\n      \"symbol\": \"DOTUSDT\",\n      \"timestamp\": \"2025-06-30T12:48:48.720757+01:00\",\n      \"volume\": 7396589.23\n    }\n  ],\n  \"timestamp\": \"2025-06-30T12:48:48.720757+01:00\"\n}"
						}
					]
				},
				{
					"name": "Get All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has orders array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('orders');",
									"    pm.expect(jsonData.orders).to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});",
									"",
									"// Test orders content",
									"pm.test(\"Orders contain required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.orders && jsonData.orders.length > 0) {",
									"        const order = jsonData.orders[0];",
									"        pm.expect(order).to.have.property('orderId');",
									"        pm.expect(order).to.have.property('symbol');",
									"        pm.expect(order).to.have.property('status');",
									"        pm.expect(order).to.have.property('origQty');",
									"        pm.expect(order).to.have.property('price');",
									"        pm.expect(order).to.have.property('executedQty');",
									"        pm.expect(order).to.have.property('time');",
									"    }",
									"});",
									"",
									"// Test order statuses",
									"pm.test(\"Orders have valid statuses\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.orders) {",
									"        const validStatuses = ['NEW', 'PARTIALLY_FILLED', 'FILLED', 'CANCELED'];",
									"        jsonData.orders.forEach(order => {",
									"            pm.expect(validStatuses).to.include(order.status);",
									"        });",
									"    }",
									"});",
									"",
									"// Log response for debugging",
									"console.log('Orders Response:', pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/exchange/binance/v1/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"exchange",
								"binance",
								"v1",
								"orders"
							]
						},
						"description": "Retrieves all orders from Binance account.\n\n**Current Implementation:** Mock data with sample orders\n**Production Ready:** Structure prepared for real Binance API `/api/v3/openOrders`\n\n**Expected Response:**\n- Array of orders with complete order information\n- Includes orderId, symbol, status, side, type, quantities, prices, timestamp\n\n**Workflow:** BinanceOrdersWorkflow\n**Activity:** GetAllOrders"
					},
					"response": [
						{
							"name": "Success - Mock Orders",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8088/api/exchange/binance/v1/orders",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",
									"path": [
										"api",
										"exchange",
										"binance",
										"v1",
										"orders"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"orders\": [\n    {\n      \"executedQty\": 0,\n      \"orderId\": \"binance-order-001\",\n      \"price\": 50000,\n      \"quantity\": 0.001,\n      \"side\": \"BUY\",\n      \"status\": \"NEW\",\n      \"success\": false,\n      \"symbol\": \"BTCUSDT\",\n      \"timestamp\": \"2025-06-30T12:50:03.620932+01:00\",\n      \"type\": \"LIMIT\"\n    },\n    {\n      \"executedQty\": 0.05,\n      \"orderId\": \"binance-order-002\",\n      \"price\": 3000,\n      \"quantity\": 0.1,\n      \"side\": \"SELL\",\n      \"status\": \"PARTIALLY_FILLED\",\n      \"success\": false,\n      \"symbol\": \"ETHUSDT\",\n      \"timestamp\": \"2025-06-30T12:50:03.620932+01:00\",\n      \"type\": \"LIMIT\"\n    }\n  ],\n  \"timestamp\": \"2025-06-30T12:50:03.620933+01:00\"\n}"
						}
					]
				}
			],
			"description": "New REST endpoints for Binance operations using GET methods. These endpoints use Temporal workflows internally for robust execution.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Set base URL if not already set",
							"if (!pm.collectionVariables.get('base_url')) {",
							"    pm.collectionVariables.set('base_url', 'http://localhost:8088');",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Legacy Workflow Endpoints",
			"item": [
				{
					"name": "Get Binance Price (Legacy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test response structure",
									"pm.test(\"Response has price information\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('symbol');",
									"    pm.expect(jsonData).to.have.property('price');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"    pm.expect(jsonData).to.have.property('success');",
									"});",
									"",
									"// Test price validity",
									"pm.test(\"Price is a valid number\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.price).to.be.a('number');",
									"    pm.expect(jsonData.price).to.be.above(0);",
									"});",
									"",
									"// Test symbol matches request",
									"pm.test(\"Symbol matches request\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.symbol).to.eql('BTCUSDT');",
									"});",
									"",
									"// Log response for debugging",
									"console.log('Price Response:', pm.response.json());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"BTCUSDT\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/workflow/v1/BinancePrice",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"workflow",
								"v1",
								"BinancePrice"
							]
						},
						"description": "Legacy endpoint for getting single cryptocurrency price using Temporal workflow.\n\n**Input:** Symbol as JSON string (e.g., \"BTCUSDT\")\n**Output:** Price information with symbol, price, timestamp, and success status\n\n**Workflow:** BinancePriceWorkflow\n**Activity:** GetPrice\n\n**Note:** This is the original implementation, maintained for backward compatibility."
					},
					"response": [
						{
							"name": "Success - BTCUSDT Price",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"BTCUSDT\"",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8088/api/workflow/v1/BinancePrice",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8088",    
									"path": [
										"api",
										"workflow",
										"v1",
										"BinancePrice"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"price\": 107838.46,\n  \"success\": false,\n  \"symbol\": \"BTCUSDT\",\n  \"timestamp\": \"2025-06-30T12:50:10.619494+01:00\"\n}"
						}
					]
				}
			],
			"description": "Legacy workflow endpoints using POST method. These maintain backward compatibility with the original workflow implementation.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Set base URL if not already set",
							"if (!pm.collectionVariables.get('base_url')) {",
							"    pm.collectionVariables.set('base_url', 'http://localhost:8088');",
							"}"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Testing Temporal Binance Workflows...');",
					"",
					"// Set collection variables",
					"pm.collectionVariables.set('base_url', 'http://localhost:8088');",
					"pm.collectionVariables.set('collection_version', '1.0.0');",
					"pm.collectionVariables.set('test_timestamp', new Date().toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script - runs after every request",
					"",
					"// Check response time",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(30000); // 30 seconds max",
					"});",
					"",
					"// Check content type",
					"pm.test(\"Content-Type is application/json\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});",
					"",
					"// Log basic request info",
					"console.log(`${pm.info.requestName}: ${pm.response.status} (${pm.response.responseTime}ms)`);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8088",
			"type": "string",
			"description": "Base URL for the Temporal API service"
		},
		{
			"key": "collection_version",
			"value": "1.0.0",
			"type": "string",
			"description": "Version of this Postman collection"
		},
		{
			"key": "test_timestamp",
			"value": "",
			"type": "string",
			"description": "Timestamp when tests were last run"
		}
	]
}
