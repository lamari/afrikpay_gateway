{
  "info": {
    "_postman_id": "9d8b9010-b87e-4b9d-8a0f-3e5d8910f5a7",
    "name": "Afrikpay - Auth Service",
    "description": "Collection pour tester le service d'authentification de l'Afrikpay Gateway",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8001",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Vérification de l'état du service"
          },
          "response": []
        },
        {
          "name": "Ready",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/ready",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "ready"
              ]
            },
            "description": "Vérification si le service est prêt"
          },
          "response": []
        }
      ],
      "description": "Endpoints de vérification de l'état du service"
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var response = pm.response.json();",
                  "if (response && response.token && response.token.access_token) {",
                  "    pm.collectionVariables.set('accessToken', response.token.access_token);",
                  "}",
                  "if (response && response.token && response.token.refresh_token) {",
                  "    pm.collectionVariables.set('refreshToken', response.token.refresh_token);",
                  "}",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has valid access token\", function () {",
                  "    pm.expect(response.token).to.have.property('access_token');",
                  "    pm.expect(response.token.access_token).to.be.a('string').and.not.empty;",
                  "});",
                  "",
                  "pm.test(\"Response has valid refresh token\", function () {",
                  "    pm.expect(response.token).to.have.property('refresh_token');",
                  "    pm.expect(response.token.refresh_token).to.be.a('string').and.not.empty;",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('id');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Authentification d'un utilisateur pour obtenir un token JWT"
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var response = pm.response.json();",
                  "if (response && response.access_token) {",
                  "    pm.collectionVariables.set('accessToken', response.access_token);",
                  "}",
                  "if (response && response.refresh_token) {",
                  "    pm.collectionVariables.set('refreshToken', response.refresh_token);",
                  "}",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has new access token\", function () {",
                  "    pm.expect(response).to.have.property('access_token');",
                  "    pm.expect(response.access_token).to.be.a('string').and.not.empty;",
                  "});",
                  "",
                  "pm.test(\"Response has new refresh token\", function () {",
                  "    pm.expect(response).to.have.property('refresh_token');",
                  "    pm.expect(response.refresh_token).to.be.a('string').and.not.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refresh_token\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "refresh"
              ]
            },
            "description": "Rafraîchissement du token JWT"
          },
          "response": []
        },
        {
          "name": "Verify Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has claims\", function () {",
                  "    var response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user_id');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('roles');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/verify",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "verify"
              ]
            },
            "description": "Vérification d'un token JWT"
          },
          "response": []
        }
      ],
      "description": "Endpoints d'authentification"
    },
    {
      "name": "Protected Routes",
      "item": [
        {
          "name": "Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user profile data\", function () {",
                  "    var response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user_id');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('roles');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/protected/profile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "protected",
                "profile"
              ]
            },
            "description": "Obtenir les informations du profil utilisateur (exemple de route protégée)"
          },
          "response": []
        }
      ],
      "description": "Routes nécessitant une authentification"
    }
  ]
}
