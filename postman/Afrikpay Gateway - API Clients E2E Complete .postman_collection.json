{
	"info": {
		"_postman_id": "a23f6d28-5e15-4543-b747-eecec11e6acb",
		"name": "Afrikpay Gateway - API Clients E2E",
		"description": "Collection for testing all external API clients used in E2E tests: Binance, Bitget, MTN MoMo, Orange Money",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1678231"
	},
	"item": [
		{
			"name": "🪙 Binance API Tests",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{binance_base_url}}/api/v3/ping",
							"host": [
								"{{binance_base_url}}"
							],
							"path": [
								"api",
								"v3",
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Price - BTCUSDT",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{binance_base_url}}/api/v3/ticker/price?symbol=BTCUSDT",
							"host": [
								"{{binance_base_url}}"
							],
							"path": [
								"api",
								"v3",
								"ticker",
								"price"
							],
							"query": [
								{
									"key": "symbol",
									"value": "BTCUSDT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote - BTCUSDT",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{binance_base_url}}/api/v3/ticker/24hr?symbol=BTCUSDT",
							"host": [
								"{{binance_base_url}}"
							],
							"path": [
								"api",
								"v3",
								"ticker",
								"24hr"
							],
							"query": [
								{
									"key": "symbol",
									"value": "BTCUSDT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Multiple Quotes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{binance_base_url}}/api/v3/ticker/24hr?symbols=[\"BTCUSDT\",\"ETHUSDT\"]",
							"host": [
								"{{binance_base_url}}"
							],
							"path": [
								"api",
								"v3",
								"ticker",
								"24hr"
							],
							"query": [
								{
									"key": "symbols",
									"value": "[\"BTCUSDT\",\"ETHUSDT\"]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Test Order (Will Fail in Testnet)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Configuration - Remplace ces valeurs par tes vraies clés API",
									"const apiKey = pm.environment.get(\"binance_api_key\") || \"ton_api_key_ici\";",
									"const apiSecret = pm.environment.get(\"binance_api_secret\") || \"ton_api_secret_ici\";",
									"",
									"// Timestamp obligatoire pour Binance",
									"const timestamp = Date.now();",
									"",
									"// Récupère les paramètres existants de la requête",
									"let queryString = \"\";",
									"",
									"// Si tu as des paramètres dans l'URL, les récupérer",
									"if (pm.request.url.query.count() > 0) {",
									"    const params = [];",
									"    pm.request.url.query.each((param) => {",
									"        if (param.key && param.value) {",
									"            params.push(param.key + \"=\" + param.value);",
									"        }",
									"    });",
									"    queryString = params.join(\"&\");",
									"}",
									"",
									"// Si tu as un body (pour POST/PUT), l'ajouter à la query string",
									"if (pm.request.method === \"POST\" || pm.request.method === \"PUT\") {",
									"    if (pm.request.body && pm.request.body.urlencoded) {",
									"        const bodyParams = [];",
									"        pm.request.body.urlencoded.each((param) => {",
									"            if (param.key && param.value) {",
									"                bodyParams.push(param.key + \"=\" + param.value);",
									"            }",
									"        });",
									"        if (bodyParams.length > 0) {",
									"            queryString = queryString ? queryString + \"&\" + bodyParams.join(\"&\") : bodyParams.join(\"&\");",
									"        }",
									"    }",
									"}",
									"",
									"// Ajouter le timestamp",
									"queryString = queryString ? queryString + \"&timestamp=\" + timestamp : \"timestamp=\" + timestamp;",
									"",
									"// Générer la signature HMAC-SHA256",
									"const signature = CryptoJS.HmacSHA256(queryString, apiSecret).toString();",
									"",
									"// Ajouter la signature à la query string",
									"if (pm.request.method === \"GET\" || pm.request.method === \"DELETE\") {",
									"    // Pour GET/DELETE, ajouter les paramètres dans l'URL",
									"    pm.request.url.query.add({",
									"        key: \"timestamp\",",
									"        value: timestamp.toString()",
									"    });",
									"    pm.request.url.query.add({",
									"        key: \"signature\",",
									"        value: signature",
									"    });",
									"} else {",
									"    // Pour POST/PUT, ajouter dans le body",
									"    if (!pm.request.body.urlencoded) {",
									"        pm.request.body.mode = \"urlencoded\";",
									"        pm.request.body.urlencoded = [];",
									"    }",
									"    pm.request.body.urlencoded.add({",
									"        key: \"timestamp\",",
									"        value: timestamp.toString()",
									"    });",
									"    pm.request.body.urlencoded.add({",
									"        key: \"signature\",",
									"        value: signature",
									"    });",
									"}",
									"",
									"// Ajouter l'API Key dans les headers",
									"pm.request.headers.add({",
									"    key: \"X-MBX-APIKEY\",",
									"    value: apiKey",
									"});",
									"",
									"console.log(\"Query String:\", queryString);",
									"console.log(\"Signature:\", signature);",
									"console.log(\"Timestamp:\", timestamp);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-MBX-APIKEY",
								"value": "{{binance_api_key}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "symbol",
									"value": "BTCUSDT"
								},
								{
									"key": "side",
									"value": "BUY"
								},
								{
									"key": "type",
									"value": "MARKET"
								},
								{
									"key": "quantity",
									"value": "0.001"
								}
							]
						},
						"url": {
							"raw": "{{binance_base_url}}/api/v3/order/test",
							"host": [
								"{{binance_base_url}}"
							],
							"path": [
								"api",
								"v3",
								"order",
								"test"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "🔥 Bitget API Tests",
			"item": [
				{
					"name": "Health Check (Server Time)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bitget_base_url}}/api/spot/v1/public/time",
							"host": [
								"{{bitget_base_url}}"
							],
							"path": [
								"api",
								"spot",
								"v1",
								"public",
								"time"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get price - BTCUSDT_SPBL",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bitget_base_url}}/api/spot/v1/market/ticker?symbol=BTCUSDT_SPBL",
							"host": [
								"{{bitget_base_url}}"
							],
							"path": [
								"api",
								"spot",
								"v1",
								"market",
								"ticker"
							],
							"query": [
								{
									"key": "symbol",
									"value": "BTCUSDT_SPBL"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Tickers (Quotes)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bitget_base_url}}/api/spot/v1/market/tickers",
							"host": [
								"{{bitget_base_url}}"
							],
							"path": [
								"api",
								"spot",
								"v1",
								"market",
								"tickers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Order (Will Fail - Test Environment) Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Configuration Bitget API v2",
									"const apiKey = pm.environment.get(\"bitget_api_key\") || \"ton_api_key_ici\";",
									"const secretKey = pm.environment.get(\"bitget_api_secret\") || \"ton_secret_key_ici\";",
									"const passphrase = pm.environment.get(\"bitget_passphrase\") || \"ton_passphrase_ici\";",
									"",
									"",
									"",
									"// Timestamp obligatoire pour Bitget",
									"const timestamp = Math.round(new Date());",
									"",
									"// Construire le message à signer pour Bitget",
									"// Format EXACT: timestamp + method + requestPath + body",
									"let method = pm.request.method.toUpperCase(); // Assure-toi que c'est en majuscules",
									"let requestPath = pm.request.url.getPath();",
									"",
									"// Pour Bitget, ne PAS inclure les query parameters dans la signature",
									"// La signature se base uniquement sur le path",
									"",
									"// Body de la requête (pour POST/PUT)",
									"let body = \"\";",
									"if (pm.request.method === \"POST\" || pm.request.method === \"PUT\") {",
									"    if (pm.request.body && pm.request.body.raw) {",
									"        // S'assurer que le JSON est compact (SANS espaces)",
									"        try {",
									"            const bodyObj = JSON.parse(pm.request.body.raw);",
									"            body = JSON.stringify(bodyObj); // JSON compact automatique",
									"        } catch (e) {",
									"            body = pm.request.body.raw; // Si pas du JSON, garder tel quel",
									"        }",
									"    } else if (pm.request.body && pm.request.body.urlencoded) {",
									"        // Convertir en JSON compact",
									"        const bodyObj = {};",
									"        pm.request.body.urlencoded.each((param) => {",
									"            if (param.key && param.value) {",
									"                bodyObj[param.key] = param.value;",
									"            }",
									"        });",
									"        body = JSON.stringify(bodyObj); // Compact JSON automatique",
									"        ",
									"        // Changer le body mode en raw/JSON",
									"        pm.request.body.mode = \"raw\";",
									"        pm.request.body.raw = body;",
									"    }",
									"}",
									"",
									"// Si pas de body, laisser vide (ne pas mettre \"{}\")",
									"if (!body) {",
									"    body = \"\";",
									"}",
									"",
									"// Message à signer: timestamp + method + requestPath + body (EXACT)",
									"const message = timestamp + method + requestPath + body;",
									"",
									"// Générer la signature HMAC-SHA256 et encoder en Base64",
									"const signature = CryptoJS.HmacSHA256(message, secretKey).toString(CryptoJS.enc.Base64);",
									"",
									"// Supprimer les headers existants pour éviter les doublons",
									"pm.request.headers.remove(\"ACCESS-KEY\");",
									"pm.request.headers.remove(\"ACCESS-SIGN\");",
									"pm.request.headers.remove(\"ACCESS-TIMESTAMP\");",
									"pm.request.headers.remove(\"ACCESS-PASSPHRASE\");",
									"pm.request.headers.remove(\"Content-Type\");",
									"pm.request.headers.remove(\"locale\");",
									"pm.request.headers.remove(\"paptrading\");",
									"",
									"// Ajouter les headers requis pour Bitget",
									"pm.request.headers.add({",
									"    key: \"ACCESS-KEY\",",
									"    value: apiKey",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"ACCESS-SIGN\", ",
									"    value: signature",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"ACCESS-TIMESTAMP\",",
									"    value: timestamp",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"ACCESS-PASSPHRASE\",",
									"    value: passphrase",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"Content-Type\",",
									"    value: \"application/json\"",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"locale\",",
									"    value: \"en-US\"",
									"});",
									"",
									"// Header requis pour DEMO TRADING",
									"pm.request.headers.add({",
									"    key: \"paptrading\",",
									"    value: \"1\"",
									"});",
									"",
									"// Debug détaillé",
									"console.log(\"=== BITGET SIGNATURE DEBUG ===\");",
									"console.log(\"Timestamp:\", timestamp);",
									"console.log(\"Method:\", method);",
									"console.log(\"Request Path:\", requestPath);",
									"console.log(\"Body:\", body);",
									"console.log(\"Body length:\", body.length);",
									"console.log(\"Message to sign:\", message);",
									"console.log(\"Message length:\", message.length);",
									"console.log(\"Secret key length:\", secretKey.length);",
									"console.log(\"Signature:\", signature);",
									"console.log(\"================================\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ACCESS-KEY",
								"value": "{{bitget_api_key}}"
							},
							{
								"key": "ACCESS-PASSPHRASE",
								"value": "{{bitget_passphrase}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "paptrading",
								"value": "1",
								"type": "text"
							},
							{
								"key": "locale",
								"value": "en-US",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"symbol\": \"BTCUSDT\",\n    \"marginMode\": \"isolated\",\n    \"marginCoin\": \"USDT\",\n    \"size\": \"1.5\",\n    \"price\": \"2000\",\n    \"side\": \"buy\",\n    \"tradeSide\": \"open\",\n    \"orderType\": \"limit\",\n    \"force\": \"gtc\",\n    \"clientOid\": \"12121212122\",\n    \"reduceOnly\": \"NO\",\n    \"presetStopSurplusPrice\": \"2300\",\n    \"presetStopLossPrice\": \"1800\"\n}"
						},
						"url": {
							"raw": "{{bitget_base_url}}/api/v2/mix/order/place-order",
							"host": [
								"{{bitget_base_url}}"
							],
							"path": [
								"api",
								"v2",
								"mix",
								"order",
								"place-order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place Order (Will Fail - Test Environment)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Configuration Bitget API v2",
									"const apiKey = pm.environment.get(\"bitget_api_key\") || \"ton_api_key_ici\";",
									"const secretKey = pm.environment.get(\"bitget_api_secret\") || \"ton_secret_key_ici\";",
									"const passphrase = pm.environment.get(\"bitget_passphrase\") || \"ton_passphrase_ici\";",
									"",
									"",
									"",
									"// Timestamp obligatoire pour Bitget",
									"const timestamp = Math.round(new Date());",
									"",
									"// Construire le message à signer pour Bitget",
									"// Format EXACT: timestamp + method + requestPath + body",
									"let method = pm.request.method.toUpperCase(); // Assure-toi que c'est en majuscules",
									"let requestPath = pm.request.url.getPath();",
									"",
									"// Pour Bitget, ne PAS inclure les query parameters dans la signature",
									"// La signature se base uniquement sur le path",
									"",
									"// Body de la requête (pour POST/PUT)",
									"let body = \"\";",
									"if (pm.request.method === \"POST\" || pm.request.method === \"PUT\") {",
									"    if (pm.request.body && pm.request.body.raw) {",
									"        // S'assurer que le JSON est compact (SANS espaces)",
									"        try {",
									"            const bodyObj = JSON.parse(pm.request.body.raw);",
									"            body = JSON.stringify(bodyObj); // JSON compact automatique",
									"        } catch (e) {",
									"            body = pm.request.body.raw; // Si pas du JSON, garder tel quel",
									"        }",
									"    } else if (pm.request.body && pm.request.body.urlencoded) {",
									"        // Convertir en JSON compact",
									"        const bodyObj = {};",
									"        pm.request.body.urlencoded.each((param) => {",
									"            if (param.key && param.value) {",
									"                bodyObj[param.key] = param.value;",
									"            }",
									"        });",
									"        body = JSON.stringify(bodyObj); // Compact JSON automatique",
									"        ",
									"        // Changer le body mode en raw/JSON",
									"        pm.request.body.mode = \"raw\";",
									"        pm.request.body.raw = body;",
									"    }",
									"}",
									"",
									"// Si pas de body, laisser vide (ne pas mettre \"{}\")",
									"if (!body) {",
									"    body = \"\";",
									"}",
									"",
									"// Message à signer: timestamp + method + requestPath + body (EXACT)",
									"const message = timestamp + method + requestPath + body;",
									"",
									"// Générer la signature HMAC-SHA256 et encoder en Base64",
									"const signature = CryptoJS.HmacSHA256(message, secretKey).toString(CryptoJS.enc.Base64);",
									"",
									"// Supprimer les headers existants pour éviter les doublons",
									"pm.request.headers.remove(\"ACCESS-KEY\");",
									"pm.request.headers.remove(\"ACCESS-SIGN\");",
									"pm.request.headers.remove(\"ACCESS-TIMESTAMP\");",
									"pm.request.headers.remove(\"ACCESS-PASSPHRASE\");",
									"pm.request.headers.remove(\"Content-Type\");",
									"pm.request.headers.remove(\"locale\");",
									"pm.request.headers.remove(\"paptrading\");",
									"",
									"// Ajouter les headers requis pour Bitget",
									"pm.request.headers.add({",
									"    key: \"ACCESS-KEY\",",
									"    value: apiKey",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"ACCESS-SIGN\", ",
									"    value: signature",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"ACCESS-TIMESTAMP\",",
									"    value: timestamp",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"ACCESS-PASSPHRASE\",",
									"    value: passphrase",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"Content-Type\",",
									"    value: \"application/json\"",
									"});",
									"",
									"pm.request.headers.add({",
									"    key: \"locale\",",
									"    value: \"en-US\"",
									"});",
									"",
									"// Header requis pour DEMO TRADING",
									"pm.request.headers.add({",
									"    key: \"paptrading\",",
									"    value: \"1\"",
									"});",
									"",
									"// Debug détaillé",
									"console.log(\"=== BITGET SIGNATURE DEBUG ===\");",
									"console.log(\"Timestamp:\", timestamp);",
									"console.log(\"Method:\", method);",
									"console.log(\"Request Path:\", requestPath);",
									"console.log(\"Body:\", body);",
									"console.log(\"Body length:\", body.length);",
									"console.log(\"Message to sign:\", message);",
									"console.log(\"Message length:\", message.length);",
									"console.log(\"Secret key length:\", secretKey.length);",
									"console.log(\"Signature:\", signature);",
									"console.log(\"================================\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ACCESS-KEY",
								"value": "{{bitget_api_key}}"
							},
							{
								"key": "ACCESS-PASSPHRASE",
								"value": "{{bitget_passphrase}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "paptrading",
								"value": "1",
								"type": "text"
							},
							{
								"key": "locale",
								"value": "en-US",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"symbol\": \"BTCUSDT\",\n    \"side\": \"buy\",\n    \"orderType\": \"limit\",\n    \"force\":\"gtc\",\n    \"price\":\"23222.5\",\n    \"size\":\"1\",\n    \"clientOid\":\"121211212122\"\n}"
						},
						"url": {
							"raw": "{{bitget_base_url}}/api/v2/spot/trade/place-order",
							"host": [
								"{{bitget_base_url}}"
							],
							"path": [
								"api",
								"v2",
								"spot",
								"trade",
								"place-order"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "💳 MTN Mobile Money Tests",
			"item": [
				{
					"name": "Post Create User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateUUID() {",
									"    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
									"        const r = Math.random() * 16 | 0;",
									"        const v = c == 'x' ? r : (r & 0x3 | 0x8);",
									"        return v.toString(16);",
									"    });",
									"}",
									"",
									"",
									"const uuid = generateUUID();",
									"console.log(\"mtn_reference_id\", uuid);",
									"pm.environment.set(\"mtn_reference_id\", uuid);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Ocp-Apim-Subscription-Key",
								"value": "{{mtn_primary_key}}"
							},
							{
								"key": "X-Reference-Id",
								"value": "{{mtn_reference_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"providerCallbackHost\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mtn_base_url}}/v1_0/apiuser",
							"host": [
								"{{mtn_base_url}}"
							],
							"path": [
								"v1_0",
								"apiuser"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Create API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ==========================================",
									"// EXTRACTION DE L'API KEY DEPUIS LA RÉPONSE",
									"// ==========================================",
									"",
									"// Vérifier que la réponse est OK",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Parser la réponse JSON",
									"const responseJson = pm.response.json();",
									"",
									"// Extraire l'apiKey",
									"const apiKey = responseJson.apiKey;",
									"",
									"// Stocker dans les variables d'environnement (recommandé)",
									"if (apiKey) {",
									"    pm.environment.set(\"MTN_API_KEY\", apiKey);",
									"    console.log(\"API Key extracted and saved:\", apiKey);",
									"} else {",
									"    console.log(\"API Key not found in response\");",
									"}",
									"",
									"// Optionnel: Stocker dans les variables globales",
									"// pm.globals.set(\"MTN_API_KEY\", apiKey);",
									"",
									"// Optionnel: Vérifier que l'API Key a bien le bon format",
									"pm.test(\"API Key has correct format\", function () {",
									"    pm.expect(apiKey).to.be.a('string');",
									"    pm.expect(apiKey).to.have.lengthOf(32); // MTN API Keys font 32 caractères",
									"});",
									"",
									"// ==========================================",
									"// AUTRES EXTRACTIONS POSSIBLES",
									"// ==========================================",
									"",
									"// Si tu veux extraire d'autres champs :",
									"// const userId = responseJson.userId;",
									"// const status = responseJson.status;",
									"",
									"// Extraire depuis un objet imbriqué :",
									"// const nestedValue = responseJson.data.someField;",
									"",
									"// Extraire depuis un array :",
									"// const firstItem = responseJson.items[0];",
									"",
									"// ==========================================",
									"// GESTION D'ERREURS",
									"// ==========================================",
									"",
									"// Vérifier si la réponse contient l'apiKey",
									"pm.test(\"Response contains apiKey\", function () {",
									"    pm.expect(responseJson).to.have.property('apiKey');",
									"    pm.expect(responseJson.apiKey).to.not.be.empty;",
									"});",
									"",
									"// Debug: Afficher toute la réponse",
									"console.log(\"Full response:\", responseJson);",
									"console.log(\"Extracted API Key:\", apiKey);",
									"pm.environment.set(\"mtn_api_key\", apiKey);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Ocp-Apim-Subscription-Key",
								"value": "{{mtn_primary_key}}"
							},
							{
								"key": "X-Reference-Id",
								"value": "{{mtn_reference_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"providerCallbackHost\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mtn_base_url}}/v1_0/apiuser/{{mtn_reference_id}}/apikey",
							"host": [
								"{{mtn_base_url}}"
							],
							"path": [
								"v1_0",
								"apiuser",
								"{{mtn_reference_id}}",
								"apikey"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Create Access Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const referenceId = pm.environment.get(\"mtn_reference_id\");",
									"const apiKey = pm.environment.get(\"mtn_api_key\");",
									"",
									"console.log(\"mtn_reference_id:\", referenceId);",
									"console.log(\"mtn_api_key:\", apiKey);",
									"console.log(\"apiKey type:\", typeof apiKey);",
									"console.log(\"apiKey value:\", JSON.stringify(apiKey));",
									"",
									"// Vérifier si les variables existent",
									"if (!referenceId) console.log(\"❌ mtn_reference_id is null/undefined\");",
									"if (!apiKey) console.log(\"❌ mtn_api_key is null/undefined\");",
									"",
									"const credentials = referenceId + \":\" + apiKey;",
									"console.log(\"credentials:\", credentials);",
									"const encodedCredentials = btoa(credentials);",
									"console.log(\"Authorization\", \"Basic \" + encodedCredentials);",
									"pm.environment.set(\"mtn_api_authorization\", \"Basic \" + encodedCredentials);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"const accessToken = responseJson.access_token;",
									"const expiresIn = responseJson.expires_in || 3600;",
									"const expiryTime = Date.now() + (expiresIn * 1000);",
									"",
									"console.log(\"Bearer Token créé avec succès\");",
									"pm.environment.set(\"mtn_access_token\", accessToken);",
									"pm.environment.set(\"mtn_token_expiry\", expiryTime.toString());",
									"",
									"",
									"console.log(\"=== MTN MOMO TOKEN DEBUG ===\");",
									"console.log(\"API User:\", pm.environment.get(\"mtn_reference_id\"));",
									"console.log(\"API Key:\", pm.environment.get(\"mtn_api_key\"));",
									"console.log(\"Bearer Token:\", pm.environment.get(\"mtn_api_authorization\"));",
									"console.log(\"Access Token:\", pm.environment.get(\"mtn_access_token\"));",
									"console.log(\"Token expiry:\", pm.environment.get(\"mtn_token_expiry\"));",
									"console.log(\"Headers ajoutés avec succès\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Ocp-Apim-Subscription-Key",
								"value": "{{mtn_primary_key}}"
							},
							{
								"key": "Authorization",
								"value": "{{mtn_api_authorization}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mtn_base_url}}/collection/token/",
							"host": [
								"{{mtn_base_url}}"
							],
							"path": [
								"collection",
								"token",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Account Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Ocp-Apim-Subscription-Key",
								"value": "{{mtn_primary_key}}"
							},
							{
								"key": "X-Target-Environment",
								"value": "sandbox"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{mtn_access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{mtn_base_url}}/collection/v1_0/account/balance",
							"host": [
								"{{mtn_base_url}}"
							],
							"path": [
								"collection",
								"v1_0",
								"account",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request to Pay (Sandbox)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Ocp-Apim-Subscription-Key",
								"value": "{{mtn_primary_key}}"
							},
							{
								"key": "X-Target-Environment",
								"value": "sandbox"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{mtn_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": \"100\",\n  \"currency\": \"EUR\",\n  \"externalId\": \"test-{{$timestamp}}\",\n  \"payer\": {\n    \"partyIdType\": \"MSISDN\",\n    \"partyId\": \"256774290781\"\n  },\n  \"payerMessage\": \"Test payment from Afrikpay Gateway\",\n  \"payeeNote\": \"Payment for crypto purchase\"\n}"
						},
						"url": {
							"raw": "{{mtn_base_url}}/collection/v1_0/requesttopay",
							"host": [
								"{{mtn_base_url}}"
							],
							"path": [
								"collection",
								"v1_0",
								"requesttopay"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "🍊 Orange Money Tests",
			"item": [
				{
					"name": "Health Check (Get Token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "{{orange_authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						},
						"url": {
							"raw": "{{orange_base_url}}/oauth/v3/token",
							"host": [
								"{{orange_base_url}}"
							],
							"path": [
								"oauth",
								"v3",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate Payment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer YOUR_ACCESS_TOKEN_HERE"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"merchant\": {\n    \"country\": \"CI\",\n    \"name\": \"Afrikpay Gateway\"\n  },\n  \"order\": {\n    \"amount\": 100,\n    \"currency\": \"XOF\",\n    \"id\": \"test-{{$timestamp}}\",\n    \"reference\": \"Crypto purchase payment\"\n  },\n  \"customer\": {\n    \"msisdn\": \"+22507000000\",\n    \"country\": \"CI\"\n  },\n  \"notif_url\": \"https://webhook.site/test\",\n  \"return_url\": \"https://your-app.com/return\",\n  \"cancel_url\": \"https://your-app.com/cancel\"\n}"
						},
						"url": {
							"raw": "{{orange_base_url}}/webpayment",
							"host": [
								"{{orange_base_url}}"
							],
							"path": [
								"webpayment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Payment Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{orange_authorization}}"
							}
						],
						"url": {
							"raw": "{{orange_base_url}}/webpayment/test-transaction-id",
							"host": [
								"{{orange_base_url}}"
							],
							"path": [
								"webpayment",
								"test-transaction-id"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "🗄️ CRUD Service Tests",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{crud_base_url}}/health",
							"host": [
								"{{crud_base_url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Wallet",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{crud_base_url}}/api/v1/wallets/user/test-user-id?currency=USDT",
							"host": [
								"{{crud_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wallets",
								"user",
								"test-user-id"
							],
							"query": [
								{
									"key": "currency",
									"value": "USDT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Transaction",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"test-user-id\",\n  \"currency\": \"USDT\",\n  \"amount\": 100.50,\n  \"type\": \"PURCHASE\",\n  \"status\": \"PENDING\",\n  \"reference\": \"test-tx-{{$timestamp}}\",\n  \"description\": \"Test crypto purchase transaction\"\n}"
						},
						"url": {
							"raw": "{{crud_base_url}}/api/v1/transactions",
							"host": [
								"{{crud_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Wallet Balance",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"test-user-id\",\n  \"currency\": \"USDT\",\n  \"amount\": 50.25,\n  \"operation\": \"ADD\"\n}"
						},
						"url": {
							"raw": "{{crud_base_url}}/api/v1/wallets/balance",
							"host": [
								"{{crud_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"wallets",
								"balance"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Generate timestamp for requests",
					"pm.globals.set('timestamp', Math.floor(Date.now() / 1000));",
					"",
					"// Add common headers if needed",
					"pm.request.headers.add({",
					"    key: 'User-Agent',",
					"    value: 'Afrikpay-Gateway/1.0'",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Common response tests",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has valid JSON or proper error', function () {",
					"    try {",
					"        pm.response.json();",
					"        pm.test('Response is valid JSON', function () {",
					"            pm.expect(true).to.be.true;",
					"        });",
					"    } catch (e) {",
					"        // For non-JSON responses, just check status",
					"        pm.test('Response status is documented', function () {",
					"            pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 401, 403, 404, 500]);",
					"        });",
					"    }",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "binance_base_url",
			"value": "https://testnet.binance.vision",
			"type": "string"
		},
		{
			"key": "binance_api_key",
			"value": "Bjhd5FsunILOwVT1RXJiUxOhZt7MQ2jydKs2jspF11kB6tv1xY3EAmDJvrR4w8la",
			"type": "string"
		},
		{
			"key": "binance_api_secret",
			"value": "LIWTukFxAjUH43qx7upKrADY1q8Ogc46OLMbeqgsv98noMvV7mWkGeseKtgUmbtC",
			"type": "string"
		},
		{
			"key": "bitget_base_url",
			"value": "https://api.bitget.com",
			"type": "string"
		},
		{
			"key": "bitget_api_key",
			"value": "bg_688e18af62fd23f63256cda0e25cc6e9",
			"type": "string"
		},
		{
			"key": "bitget_api_secret",
			"value": "37b51bfea417288f91bc08cd38a9a9c41e92c1ce0bf686ebbca833eafa2f32d5",
			"type": "string"
		},
		{
			"key": "bitget_passphrase",
			"value": "afrikpaygateway",
			"type": "string"
		},
		{
			"key": "mtn_base_url",
			"value": "https://sandbox.momodeveloper.mtn.com",
			"type": "string"
		},
		{
			"key": "mtn_primary_key",
			"value": "d3a8f9bfaad746ae9221a99cf40f5d12",
			"type": "string"
		},
		{
			"key": "mtn_secondary_key",
			"value": "72d3ac51e62f49af83b9c854fe427bd5",
			"type": "string"
		},
		{
			"key": "orange_base_url",
			"value": "api.orange.com",
			"type": "string"
		},
		{
			"key": "orange_client_id",
			"value": "LNAzgV2wqco8pwbx8iKPbAM5C2qyAzHB",
			"type": "string"
		},
		{
			"key": "orange_client_secret",
			"value": "NTOIQfmN22APwNcoCPBKBbexsHpOIwxTxVDaZYu7smOf",
			"type": "string"
		},
		{
			"key": "orange_authorization",
			"value": "Basic TE5BemdWMndxY284cHdieDhpS1BiQU01QzJxeUF6SEI6TlRPSVFmbU4yMkFQd05jb0NQQktCYmV4c0hwT0l3eFR4VkRhWll1N3NtT2Y=",
			"type": "string"
		},
		{
			"key": "crud_base_url",
			"value": "http://localhost:8002",
			"type": "string"
		}
	]
}