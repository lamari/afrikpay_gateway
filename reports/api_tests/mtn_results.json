{
  "collection": {
    "item": [
      {
        "id": "b0f56c51-80c3-41bf-a0bb-16fe738c7b5a",
        "name": "Binance API Tests",
        "item": [
          {
            "id": "fa6295b5-5cc5-4fc9-80fa-e05d38d861e8",
            "name": "Get Price - BTCUSDT",
            "request": {
              "url": {
                "path": [
                  "api",
                  "v3",
                  "ticker",
                  "price"
                ],
                "host": [
                  "{{binance_base_url}}"
                ],
                "query": [
                  {
                    "key": "symbol",
                    "value": "BTCUSDT"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "X-MBX-APIKEY",
                  "value": "{{binance_api_key}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2c537ef9-730b-4d91-8c0a-b4c86e895f48",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has symbol and price', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('symbol');",
                    "    pm.expect(jsonData).to.have.property('price');",
                    "    pm.expect(jsonData.symbol).to.eql('BTCUSDT');",
                    "    pm.expect(parseFloat(jsonData.price)).to.be.a('number');",
                    "});",
                    "",
                    "pm.test('Price format matches our client expectation', function () {",
                    "    const jsonData = pm.response.json();",
                    "    // Our client expects price as string that can be parsed to float",
                    "    pm.expect(jsonData.price).to.be.a('string');",
                    "    pm.expect(parseFloat(jsonData.price)).to.be.above(0);",
                    "});"
                  ]
                }
              }
            ]
          },
          {
            "id": "abb33a08-d154-4d62-a447-14f94d1f4051",
            "name": "Get Price - ETHUSDT",
            "request": {
              "url": {
                "path": [
                  "api",
                  "v3",
                  "ticker",
                  "price"
                ],
                "host": [
                  "{{binance_base_url}}"
                ],
                "query": [
                  {
                    "key": "symbol",
                    "value": "ETHUSDT"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "X-MBX-APIKEY",
                  "value": "{{binance_api_key}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "406afe79-0d97-4bd9-96b2-5d00ea3d1238",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has symbol and price', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('symbol');",
                    "    pm.expect(jsonData).to.have.property('price');",
                    "    pm.expect(jsonData.symbol).to.eql('ETHUSDT');",
                    "});"
                  ]
                }
              }
            ]
          },
          {
            "id": "0730fa45-2aed-43f2-8dc6-5c9a30267aaa",
            "name": "Get All Prices (24hr Ticker)",
            "request": {
              "url": {
                "path": [
                  "api",
                  "v3",
                  "ticker",
                  "24hr"
                ],
                "host": [
                  "{{binance_base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "X-MBX-APIKEY",
                  "value": "{{binance_api_key}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3d531879-4329-4b1a-981a-89a5d31159dc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is array of tickers', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "    pm.expect(jsonData.length).to.be.above(0);",
                    "});",
                    "",
                    "pm.test('Each ticker has required fields', function () {",
                    "    const jsonData = pm.response.json();",
                    "    const firstTicker = jsonData[0];",
                    "    pm.expect(firstTicker).to.have.property('symbol');",
                    "    pm.expect(firstTicker).to.have.property('lastPrice');",
                    "    pm.expect(firstTicker).to.have.property('volume');",
                    "});"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c3b9f45d-4897-430c-85eb-4a901d469a36",
        "name": "Bitget API Tests",
        "item": [
          {
            "id": "ce0111bf-c621-41b4-9870-123863e78724",
            "name": "Get Ticker - BTCUSDT",
            "request": {
              "url": {
                "path": [
                  "api",
                  "spot",
                  "v1",
                  "market",
                  "ticker"
                ],
                "host": [
                  "{{bitget_base_url}}"
                ],
                "query": [
                  {
                    "key": "symbol",
                    "value": "BTCUSDT"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "ACCESS-KEY",
                  "value": "{{bitget_api_key}}"
                },
                {
                  "key": "ACCESS-TIMESTAMP",
                  "value": "{{$timestamp}}"
                },
                {
                  "description": {
                    "content": "This needs to be calculated based on Bitget's signature algorithm",
                    "type": "text/plain"
                  },
                  "key": "ACCESS-SIGN",
                  "value": "SIGNATURE_PLACEHOLDER"
                },
                {
                  "key": "ACCESS-PASSPHRASE",
                  "value": "{{bitget_passphrase}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cfa0816c-fd38-42be-85a4-6098c2557a0b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has correct structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('code');",
                    "    pm.expect(jsonData).to.have.property('msg');",
                    "    pm.expect(jsonData).to.have.property('data');",
                    "});",
                    "",
                    "pm.test('Data has required fields for our client', function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.code === '00000' && jsonData.data) {",
                    "        pm.expect(jsonData.data).to.have.property('symbol');",
                    "        pm.expect(jsonData.data).to.have.property('lastPr');",
                    "        pm.expect(jsonData.data).to.have.property('baseVolume');",
                    "    }",
                    "});"
                  ]
                }
              }
            ]
          },
          {
            "id": "f991d417-008a-4e50-b64a-e6526be76e15",
            "name": "Get All Tickers",
            "request": {
              "url": {
                "path": [
                  "api",
                  "spot",
                  "v1",
                  "market",
                  "tickers"
                ],
                "host": [
                  "{{bitget_base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "ACCESS-KEY",
                  "value": "{{bitget_api_key}}"
                },
                {
                  "key": "ACCESS-TIMESTAMP",
                  "value": "{{$timestamp}}"
                },
                {
                  "key": "ACCESS-SIGN",
                  "value": "SIGNATURE_PLACEHOLDER"
                },
                {
                  "key": "ACCESS-PASSPHRASE",
                  "value": "{{bitget_passphrase}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "efc9c036-10ae-4b3c-93f5-7f59be83b792",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has correct structure', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('code');",
                    "    pm.expect(jsonData).to.have.property('data');",
                    "});",
                    "",
                    "pm.test('Data is array of tickers', function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.code === '00000') {",
                    "        pm.expect(jsonData.data).to.be.an('array');",
                    "        if (jsonData.data.length > 0) {",
                    "            const firstTicker = jsonData.data[0];",
                    "            pm.expect(firstTicker).to.have.property('symbol');",
                    "            pm.expect(firstTicker).to.have.property('lastPr');",
                    "        }",
                    "    }",
                    "});"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e8bdfe4a-9d00-44a6-b406-1e2d37414edb",
        "name": "MTN Mobile Money API Tests",
        "item": [
          {
            "id": "6e8e59db-2825-4de9-b95a-2b806a9c48de",
            "name": "Get Account Balance",
            "request": {
              "url": {
                "path": [
                  "collection",
                  "v1_0",
                  "accountbalance"
                ],
                "host": [
                  "{{mtn_sandbox_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{mtn_api_key}}"
                },
                {
                  "key": "X-Target-Environment",
                  "value": "sandbox"
                },
                {
                  "key": "Ocp-Apim-Subscription-Key",
                  "value": "{{mtn_subscription_key}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has balance information', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('availableBalance');",
                    "    pm.expect(jsonData).to.have.property('currency');",
                    "});",
                    "",
                    "pm.test('Balance format matches our client expectation', function () {",
                    "    const jsonData = pm.response.json();",
                    "    // Our client expects availableBalance as string",
                    "    pm.expect(jsonData.availableBalance).to.be.a('string');",
                    "    pm.expect(parseFloat(jsonData.availableBalance)).to.be.a('number');",
                    "});"
                  ],
                  "_lastExecutionId": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
                }
              }
            ]
          },
          {
            "id": "973861f5-736d-4d95-967f-28d19851f609",
            "name": "Request to Pay",
            "request": {
              "url": {
                "path": [
                  "collection",
                  "v1_0",
                  "requesttopay"
                ],
                "host": [
                  "{{mtn_sandbox_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{mtn_api_key}}"
                },
                {
                  "key": "X-Reference-Id",
                  "value": "{{$guid}}"
                },
                {
                  "key": "X-Target-Environment",
                  "value": "sandbox"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Ocp-Apim-Subscription-Key",
                  "value": "{{mtn_subscription_key}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"amount\": \"100.00\",\n    \"currency\": \"EUR\",\n    \"externalId\": \"test-{{$timestamp}}\",\n    \"payer\": {\n        \"partyIdType\": \"MSISDN\",\n        \"partyId\": \"256774290781\"\n    },\n    \"payerMessage\": \"Test payment from Afrikpay\",\n    \"payeeNote\": \"Payment for crypto purchase\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fdacb6db-1423-4cd8-8497-3937b75bb581",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 202 (Accepted)', function () {",
                    "    pm.response.to.have.status(202);",
                    "});",
                    "",
                    "pm.test('Response has X-Reference-Id header', function () {",
                    "    pm.expect(pm.response.headers.get('X-Reference-Id')).to.not.be.null;",
                    "    // Store reference ID for status check",
                    "    pm.globals.set('mtn_reference_id', pm.response.headers.get('X-Reference-Id'));",
                    "});"
                  ]
                }
              }
            ]
          },
          {
            "id": "25baefb2-47b2-4ce4-87be-cb5b1a6dd46f",
            "name": "Get Payment Status",
            "request": {
              "url": {
                "path": [
                  "collection",
                  "v1_0",
                  "requesttopay",
                  "{{mtn_reference_id}}"
                ],
                "host": [
                  "{{mtn_sandbox_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{mtn_api_key}}"
                },
                {
                  "key": "X-Target-Environment",
                  "value": "sandbox"
                },
                {
                  "key": "Ocp-Apim-Subscription-Key",
                  "value": "{{mtn_subscription_key}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "64b5eb66-a6c1-4839-bd37-9ddd890e120f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has payment status fields', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('amount');",
                    "    pm.expect(jsonData).to.have.property('currency');",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "});",
                    "",
                    "pm.test('Status field matches our client expectations', function () {",
                    "    const jsonData = pm.response.json();",
                    "    // Our client maps MTN statuses to our internal statuses",
                    "    const validStatuses = ['PENDING', 'SUCCESSFUL', 'FAILED'];",
                    "    pm.expect(validStatuses).to.include(jsonData.status);",
                    "});",
                    "",
                    "pm.test('Amount format matches our client expectation', function () {",
                    "    const jsonData = pm.response.json();",
                    "    // Our client expects amount as string",
                    "    pm.expect(jsonData.amount).to.be.a('string');",
                    "});"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b7f6aef4-2f08-411e-990a-535f17188c4e",
        "name": "Orange Money API Tests",
        "item": [
          {
            "id": "1b0fff1b-f089-4105-a23f-f09792d46032",
            "name": "Get Account Balance",
            "request": {
              "url": {
                "path": [
                  "omcoreapis",
                  "1.0.2",
                  "mp",
                  "balance"
                ],
                "host": [
                  "{{orange_sandbox_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{orange_api_key}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8560f45d-4ec4-4b94-9f1f-66414d3b43ec",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has balance information', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('balance');",
                    "    pm.expect(jsonData).to.have.property('currency');",
                    "});",
                    "",
                    "pm.test('Balance format matches our client expectation', function () {",
                    "    const jsonData = pm.response.json();",
                    "    // Our client expects balance as number (float64)",
                    "    pm.expect(jsonData.balance).to.be.a('number');",
                    "});"
                  ]
                }
              }
            ]
          },
          {
            "id": "1d996dbf-67ed-414d-9299-6563a8129dbe",
            "name": "Initiate Payment",
            "request": {
              "url": {
                "path": [
                  "omcoreapis",
                  "1.0.2",
                  "mp",
                  "pay"
                ],
                "host": [
                  "{{orange_sandbox_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{orange_api_key}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"amount\": 100.00,\n    \"currency\": \"XOF\",\n    \"phoneNumber\": \"+22507000000\",\n    \"description\": \"Test payment from Afrikpay\",\n    \"externalId\": \"test-{{$timestamp}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e10da668-b8a8-45e3-a671-373f903d508b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 201 (Created)', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test('Response has transaction information', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('transactionId');",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "    // Store transaction ID for status check",
                    "    pm.globals.set('orange_transaction_id', jsonData.transactionId);",
                    "});",
                    "",
                    "pm.test('Transaction ID format matches our client expectation', function () {",
                    "    const jsonData = pm.response.json();",
                    "    // Our client expects transactionId as string",
                    "    pm.expect(jsonData.transactionId).to.be.a('string');",
                    "});"
                  ]
                }
              }
            ]
          },
          {
            "id": "13aacaa3-b3ed-4542-ab8c-ccdc84c796de",
            "name": "Get Payment Status",
            "request": {
              "url": {
                "path": [
                  "omcoreapis",
                  "1.0.2",
                  "mp",
                  "status",
                  "{{orange_transaction_id}}"
                ],
                "host": [
                  "{{orange_sandbox_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{orange_api_key}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c501f3be-b603-4450-bdc0-9460723efba6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has payment status fields', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('transactionId');",
                    "    pm.expect(jsonData).to.have.property('status');",
                    "    pm.expect(jsonData).to.have.property('amount');",
                    "});",
                    "",
                    "pm.test('Status field matches our client expectations', function () {",
                    "    const jsonData = pm.response.json();",
                    "    // Our client maps Orange statuses to our internal statuses",
                    "    const validStatuses = ['PENDING', 'SUCCESS', 'FAILED'];",
                    "    pm.expect(validStatuses).to.include(jsonData.status);",
                    "});",
                    "",
                    "pm.test('Amount format matches our client expectation', function () {",
                    "    const jsonData = pm.response.json();",
                    "    // Our client expects amount as number (float64)",
                    "    pm.expect(jsonData.amount).to.be.a('number');",
                    "});"
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "auth": {
      "type": "noauth",
      "noauth": []
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "e09752a1-bf2b-4e8b-82e8-a89e5ee868fd",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script for common setup",
            "console.log('Running pre-request script for:', pm.info.requestName);"
          ],
          "_lastExecutionId": "feaacf7e-2fcb-492b-aedd-bed249a20918"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "27945578-7290-4b47-b0ce-67dff29ebc4e",
          "type": "text/javascript",
          "exec": [
            "// Global test script for common validations",
            "pm.test('Response time is acceptable', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(5000);",
            "});",
            "",
            "pm.test('Response has valid JSON format', function () {",
            "    pm.response.to.be.json;",
            "});"
          ],
          "_lastExecutionId": "ad46c176-1894-41d1-9449-759ac480e631"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "https://api.binance.com",
        "key": "binance_base_url"
      },
      {
        "type": "string",
        "value": "https://testnet.binance.vision",
        "key": "binance_testnet_url"
      },
      {
        "type": "string",
        "value": "https://api.bitget.com",
        "key": "bitget_base_url"
      },
      {
        "type": "string",
        "value": "https://sandbox.momodeveloper.mtn.com",
        "key": "mtn_sandbox_url"
      },
      {
        "type": "string",
        "value": "https://api.orange.com",
        "key": "orange_sandbox_url"
      },
      {
        "type": "string",
        "value": "YOUR_BINANCE_API_KEY",
        "key": "binance_api_key"
      },
      {
        "type": "string",
        "value": "YOUR_BITGET_API_KEY",
        "key": "bitget_api_key"
      },
      {
        "type": "string",
        "value": "YOUR_BITGET_SECRET_KEY",
        "key": "bitget_secret_key"
      },
      {
        "type": "string",
        "value": "YOUR_BITGET_PASSPHRASE",
        "key": "bitget_passphrase"
      },
      {
        "type": "string",
        "value": "YOUR_MTN_API_KEY",
        "key": "mtn_api_key"
      },
      {
        "type": "string",
        "value": "YOUR_MTN_SUBSCRIPTION_KEY",
        "key": "mtn_subscription_key"
      },
      {
        "type": "string",
        "value": "YOUR_ORANGE_API_KEY",
        "key": "orange_api_key"
      }
    ],
    "info": {
      "_postman_id": "93b2165c-0327-4245-b721-3b119babe059",
      "name": "Afrikpay Third Party APIs Validation",
      "version": {
        "raw": "1.0.0",
        "major": 1,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "1.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Collection to test direct API calls to Binance, Bitget, MTN, and Orange APIs to validate our client implementations",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment"
    },
    "id": "third-party-apis-env",
    "name": "Third Party APIs Environment",
    "values": [
      {
        "type": "any",
        "value": "https://testnet.binance.vision",
        "key": "binance_base_url"
      },
      {
        "type": "any",
        "value": "https://testnet.binance.vision",
        "key": "binance_testnet_url"
      },
      {
        "type": "any",
        "value": "https://api.bitget.com",
        "key": "bitget_base_url"
      },
      {
        "type": "any",
        "value": "https://sandbox.momodeveloper.mtn.com",
        "key": "mtn_sandbox_url"
      },
      {
        "type": "any",
        "value": "https://api.orange.com",
        "key": "orange_sandbox_url"
      },
      {
        "type": "any",
        "value": "demo_binance_key_for_testing",
        "key": "binance_api_key"
      },
      {
        "type": "any",
        "value": "demo_bitget_key",
        "key": "bitget_api_key"
      },
      {
        "type": "any",
        "value": "demo_bitget_secret",
        "key": "bitget_secret_key"
      },
      {
        "type": "any",
        "value": "demo_passphrase",
        "key": "bitget_passphrase"
      },
      {
        "type": "any",
        "value": "demo_mtn_api_key",
        "key": "mtn_api_key"
      },
      {
        "type": "any",
        "value": "demo_mtn_subscription_key",
        "key": "mtn_subscription_key"
      },
      {
        "type": "any",
        "value": "demo_orange_api_key",
        "key": "orange_api_key"
      }
    ]
  },
  "globals": {
    "id": "5dd590df-68bf-466f-8226-c8a282c31e7c",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 3,
        "pending": 0,
        "failed": 1
      },
      "prerequests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 5,
        "pending": 0,
        "failed": 3
      },
      "testScripts": {
        "total": 2,
        "pending": 0,
        "failed": 1
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 1335,
      "responseMin": 1335,
      "responseMax": 1335,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1751067995370,
      "completed": 1751067997770
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4c74779e-e856-47a2-9c83-5fd1404bbf75",
          "httpRequestId": "e9189669-e5f5-40f5-ae5e-726551f6de5d"
        },
        "item": {
          "id": "6e8e59db-2825-4de9-b95a-2b806a9c48de",
          "name": "Get Account Balance",
          "request": {
            "url": {
              "path": [
                "collection",
                "v1_0",
                "accountbalance"
              ],
              "host": [
                "{{mtn_sandbox_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{mtn_api_key}}"
              },
              {
                "key": "X-Target-Environment",
                "value": "sandbox"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{mtn_subscription_key}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has balance information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('availableBalance');",
                  "    pm.expect(jsonData).to.have.property('currency');",
                  "});",
                  "",
                  "pm.test('Balance format matches our client expectation', function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Our client expects availableBalance as string",
                  "    pm.expect(jsonData.availableBalance).to.be.a('string');",
                  "    pm.expect(parseFloat(jsonData.availableBalance)).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "collection",
              "v1_0",
              "accountbalance"
            ],
            "host": [
              "sandbox",
              "momodeveloper",
              "mtn",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer demo_mtn_api_key"
            },
            {
              "key": "X-Target-Environment",
              "value": "sandbox"
            },
            {
              "key": "Ocp-Apim-Subscription-Key",
              "value": "demo_mtn_subscription_key"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "413b2082-c447-4db9-9bd6-c11a10ec5e66",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandbox.momodeveloper.mtn.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "db759ac3-6df6-43d5-95d5-e6dc2475eb5e",
          "status": "Resource Not Found",
          "code": 404,
          "header": [
            {
              "key": "Content-Length",
              "value": "54"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Request-Context",
              "value": "appId=cid-v1:e996501c-e721-4ac1-97ff-dc6887b85e8c"
            },
            {
              "key": "Date",
              "value": "Fri, 27 Jun 2025 23:46:37 GMT"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              32,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              32,
              52,
              48,
              52,
              44,
              32,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              32,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              32,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1335,
          "responseSize": 54
        },
        "id": "6e8e59db-2825-4de9-b95a-2b806a9c48de",
        "assertions": [
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has valid JSON format",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response has balance information",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has balance information",
              "message": "expected { statusCode: 404, …(1) } to have property 'availableBalance'",
              "stack": "AssertionError: expected { statusCode: 404, …(1) } to have property 'availableBalance'\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Balance format matches our client expectation",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Balance format matches our client expectation",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:3:1)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "name": "AssertionFailure",
              "message": "Status code is 200, Response has balance information, Balance format matches our client expectation",
              "stack": "AssertionFailure: Status code is 200, Response has balance information, Balance format matches our client expectation\n    at postProcessContext (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/runner/extensions/event.command.js:41:17)\n    at PostmanCollectionRun.<anonymous> (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/runner/extensions/event.command.js:513:39)\n    at PostmanSandbox.<anonymous> (/opt/homebrew/lib/node_modules/newman/node_modules/postman-sandbox/lib/postman-sandbox.js:122:13)\n    at Object.onceWrapper (node:events:622:26)\n    at PostmanSandbox.emit (node:events:507:28)\n    at context.__uvm_emit (/opt/homebrew/lib/node_modules/newman/node_modules/uvm/lib/bridge.js:71:21)\n    at Object.dispatch (evalmachine.<anonymous>:20:13)\n    at Object.<anonymous> (evalmachine.<anonymous>:66:7838)\n    at t.exports.terminate (evalmachine.<anonymous>:66:20792)\n    at Immediate._onImmediate (evalmachine.<anonymous>:66:5971)\n    at process.processImmediate (node:internal/timers:507:21)",
              "checksum": "7002ba2dc40800a2ce9b60b257418992",
              "id": "a968840a-255d-4df3-99f3-1340daae6e3d",
              "timestamp": 1751067997766,
              "stacktrace": [
                {
                  "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/runner/extensions/event.command.js",
                  "lineNumber": 41,
                  "functionName": "postProcessContext",
                  "typeName": "Object",
                  "methodName": null,
                  "columnNumber": 17,
                  "native": false
                },
                {
                  "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/runner/extensions/event.command.js",
                  "lineNumber": 513,
                  "functionName": "",
                  "typeName": "PostmanCollectionRun",
                  "methodName": null,
                  "columnNumber": 39,
                  "native": false
                },
                {
                  "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-sandbox/lib/postman-sandbox.js",
                  "lineNumber": 122,
                  "functionName": "",
                  "typeName": "PostmanSandbox",
                  "methodName": null,
                  "columnNumber": 13,
                  "native": false
                },
                {
                  "fileName": "node:events",
                  "lineNumber": 622,
                  "functionName": "Object.onceWrapper",
                  "typeName": "Object",
                  "methodName": "onceWrapper",
                  "columnNumber": 26,
                  "native": false
                },
                {
                  "fileName": "node:events",
                  "lineNumber": 507,
                  "functionName": "PostmanSandbox.emit",
                  "typeName": "PostmanSandbox",
                  "methodName": "emit",
                  "columnNumber": 28,
                  "native": false
                },
                {
                  "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/uvm/lib/bridge.js",
                  "lineNumber": 71,
                  "functionName": "context.__uvm_emit",
                  "typeName": "context",
                  "methodName": "__uvm_emit",
                  "columnNumber": 21,
                  "native": false
                },
                {
                  "fileName": "evalmachine.<anonymous>",
                  "lineNumber": 20,
                  "functionName": "Object.dispatch",
                  "typeName": "Object",
                  "methodName": "dispatch",
                  "columnNumber": 13,
                  "native": false
                },
                {
                  "fileName": "evalmachine.<anonymous>",
                  "lineNumber": 66,
                  "functionName": "",
                  "typeName": "Object",
                  "methodName": null,
                  "columnNumber": 7838,
                  "native": false
                },
                {
                  "fileName": "evalmachine.<anonymous>",
                  "lineNumber": 66,
                  "functionName": "t.exports.terminate",
                  "typeName": "t",
                  "methodName": "exports.terminate",
                  "columnNumber": 20792,
                  "native": false
                },
                {
                  "fileName": "evalmachine.<anonymous>",
                  "lineNumber": 66,
                  "functionName": "Immediate._onImmediate",
                  "typeName": "Immediate",
                  "methodName": "_onImmediate",
                  "columnNumber": 5971,
                  "native": false
                },
                {
                  "fileName": "node:internal/timers",
                  "lineNumber": 507,
                  "functionName": "process.processImmediate",
                  "typeName": "process",
                  "methodName": "processImmediate",
                  "columnNumber": 21,
                  "native": false
                }
              ]
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 54
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "4174ab55415cd8b91968c41aa1025020",
          "id": "fca2a6fa-0a6a-4c39-8c99-3f29bf04a650",
          "timestamp": 1751067997763,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6e8e59db-2825-4de9-b95a-2b806a9c48de",
          "name": "Get Account Balance",
          "request": {
            "url": {
              "path": [
                "collection",
                "v1_0",
                "accountbalance"
              ],
              "host": [
                "{{mtn_sandbox_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{mtn_api_key}}"
              },
              {
                "key": "X-Target-Environment",
                "value": "sandbox"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{mtn_subscription_key}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has balance information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('availableBalance');",
                  "    pm.expect(jsonData).to.have.property('currency');",
                  "});",
                  "",
                  "pm.test('Balance format matches our client expectation', function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Our client expects availableBalance as string",
                  "    pm.expect(jsonData.availableBalance).to.be.a('string');",
                  "    pm.expect(parseFloat(jsonData.availableBalance)).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
              }
            }
          ]
        },
        "parent": {
          "id": "e8bdfe4a-9d00-44a6-b406-1e2d37414edb",
          "name": "MTN Mobile Money API Tests",
          "item": [
            {
              "id": "6e8e59db-2825-4de9-b95a-2b806a9c48de",
              "name": "Get Account Balance",
              "request": {
                "url": {
                  "path": [
                    "collection",
                    "v1_0",
                    "accountbalance"
                  ],
                  "host": [
                    "{{mtn_sandbox_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{mtn_api_key}}"
                  },
                  {
                    "key": "X-Target-Environment",
                    "value": "sandbox"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{mtn_subscription_key}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has balance information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('availableBalance');",
                      "    pm.expect(jsonData).to.have.property('currency');",
                      "});",
                      "",
                      "pm.test('Balance format matches our client expectation', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Our client expects availableBalance as string",
                      "    pm.expect(jsonData.availableBalance).to.be.a('string');",
                      "    pm.expect(parseFloat(jsonData.availableBalance)).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
                  }
                }
              ]
            },
            {
              "id": "973861f5-736d-4d95-967f-28d19851f609",
              "name": "Request to Pay",
              "request": {
                "url": {
                  "path": [
                    "collection",
                    "v1_0",
                    "requesttopay"
                  ],
                  "host": [
                    "{{mtn_sandbox_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{mtn_api_key}}"
                  },
                  {
                    "key": "X-Reference-Id",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "X-Target-Environment",
                    "value": "sandbox"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{mtn_subscription_key}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"amount\": \"100.00\",\n    \"currency\": \"EUR\",\n    \"externalId\": \"test-{{$timestamp}}\",\n    \"payer\": {\n        \"partyIdType\": \"MSISDN\",\n        \"partyId\": \"256774290781\"\n    },\n    \"payerMessage\": \"Test payment from Afrikpay\",\n    \"payeeNote\": \"Payment for crypto purchase\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fdacb6db-1423-4cd8-8497-3937b75bb581",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 202 (Accepted)', function () {",
                      "    pm.response.to.have.status(202);",
                      "});",
                      "",
                      "pm.test('Response has X-Reference-Id header', function () {",
                      "    pm.expect(pm.response.headers.get('X-Reference-Id')).to.not.be.null;",
                      "    // Store reference ID for status check",
                      "    pm.globals.set('mtn_reference_id', pm.response.headers.get('X-Reference-Id'));",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "id": "25baefb2-47b2-4ce4-87be-cb5b1a6dd46f",
              "name": "Get Payment Status",
              "request": {
                "url": {
                  "path": [
                    "collection",
                    "v1_0",
                    "requesttopay",
                    "{{mtn_reference_id}}"
                  ],
                  "host": [
                    "{{mtn_sandbox_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{mtn_api_key}}"
                  },
                  {
                    "key": "X-Target-Environment",
                    "value": "sandbox"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{mtn_subscription_key}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "64b5eb66-a6c1-4839-bd37-9ddd890e120f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has payment status fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('amount');",
                      "    pm.expect(jsonData).to.have.property('currency');",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "});",
                      "",
                      "pm.test('Status field matches our client expectations', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Our client maps MTN statuses to our internal statuses",
                      "    const validStatuses = ['PENDING', 'SUCCESSFUL', 'FAILED'];",
                      "    pm.expect(validStatuses).to.include(jsonData.status);",
                      "});",
                      "",
                      "pm.test('Amount format matches our client expectation', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Our client expects amount as string",
                      "    pm.expect(jsonData.amount).to.be.a('string');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4c74779e-e856-47a2-9c83-5fd1404bbf75",
          "httpRequestId": "e9189669-e5f5-40f5-ae5e-726551f6de5d",
          "scriptId": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
          "execution": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has balance information",
          "message": "expected { statusCode: 404, …(1) } to have property 'availableBalance'",
          "stack": "AssertionError: expected { statusCode: 404, …(1) } to have property 'availableBalance'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "94178112e7088c60135d2bc547aa1219",
          "id": "b86be02c-7801-4d6b-a7e6-fa5e033e1bd1",
          "timestamp": 1751067997765,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6e8e59db-2825-4de9-b95a-2b806a9c48de",
          "name": "Get Account Balance",
          "request": {
            "url": {
              "path": [
                "collection",
                "v1_0",
                "accountbalance"
              ],
              "host": [
                "{{mtn_sandbox_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{mtn_api_key}}"
              },
              {
                "key": "X-Target-Environment",
                "value": "sandbox"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{mtn_subscription_key}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has balance information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('availableBalance');",
                  "    pm.expect(jsonData).to.have.property('currency');",
                  "});",
                  "",
                  "pm.test('Balance format matches our client expectation', function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Our client expects availableBalance as string",
                  "    pm.expect(jsonData.availableBalance).to.be.a('string');",
                  "    pm.expect(parseFloat(jsonData.availableBalance)).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
              }
            }
          ]
        },
        "parent": {
          "id": "e8bdfe4a-9d00-44a6-b406-1e2d37414edb",
          "name": "MTN Mobile Money API Tests",
          "item": [
            {
              "id": "6e8e59db-2825-4de9-b95a-2b806a9c48de",
              "name": "Get Account Balance",
              "request": {
                "url": {
                  "path": [
                    "collection",
                    "v1_0",
                    "accountbalance"
                  ],
                  "host": [
                    "{{mtn_sandbox_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{mtn_api_key}}"
                  },
                  {
                    "key": "X-Target-Environment",
                    "value": "sandbox"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{mtn_subscription_key}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has balance information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('availableBalance');",
                      "    pm.expect(jsonData).to.have.property('currency');",
                      "});",
                      "",
                      "pm.test('Balance format matches our client expectation', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Our client expects availableBalance as string",
                      "    pm.expect(jsonData.availableBalance).to.be.a('string');",
                      "    pm.expect(parseFloat(jsonData.availableBalance)).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
                  }
                }
              ]
            },
            {
              "id": "973861f5-736d-4d95-967f-28d19851f609",
              "name": "Request to Pay",
              "request": {
                "url": {
                  "path": [
                    "collection",
                    "v1_0",
                    "requesttopay"
                  ],
                  "host": [
                    "{{mtn_sandbox_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{mtn_api_key}}"
                  },
                  {
                    "key": "X-Reference-Id",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "X-Target-Environment",
                    "value": "sandbox"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{mtn_subscription_key}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"amount\": \"100.00\",\n    \"currency\": \"EUR\",\n    \"externalId\": \"test-{{$timestamp}}\",\n    \"payer\": {\n        \"partyIdType\": \"MSISDN\",\n        \"partyId\": \"256774290781\"\n    },\n    \"payerMessage\": \"Test payment from Afrikpay\",\n    \"payeeNote\": \"Payment for crypto purchase\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fdacb6db-1423-4cd8-8497-3937b75bb581",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 202 (Accepted)', function () {",
                      "    pm.response.to.have.status(202);",
                      "});",
                      "",
                      "pm.test('Response has X-Reference-Id header', function () {",
                      "    pm.expect(pm.response.headers.get('X-Reference-Id')).to.not.be.null;",
                      "    // Store reference ID for status check",
                      "    pm.globals.set('mtn_reference_id', pm.response.headers.get('X-Reference-Id'));",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "id": "25baefb2-47b2-4ce4-87be-cb5b1a6dd46f",
              "name": "Get Payment Status",
              "request": {
                "url": {
                  "path": [
                    "collection",
                    "v1_0",
                    "requesttopay",
                    "{{mtn_reference_id}}"
                  ],
                  "host": [
                    "{{mtn_sandbox_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{mtn_api_key}}"
                  },
                  {
                    "key": "X-Target-Environment",
                    "value": "sandbox"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{mtn_subscription_key}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "64b5eb66-a6c1-4839-bd37-9ddd890e120f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has payment status fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('amount');",
                      "    pm.expect(jsonData).to.have.property('currency');",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "});",
                      "",
                      "pm.test('Status field matches our client expectations', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Our client maps MTN statuses to our internal statuses",
                      "    const validStatuses = ['PENDING', 'SUCCESSFUL', 'FAILED'];",
                      "    pm.expect(validStatuses).to.include(jsonData.status);",
                      "});",
                      "",
                      "pm.test('Amount format matches our client expectation', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Our client expects amount as string",
                      "    pm.expect(jsonData.amount).to.be.a('string');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4c74779e-e856-47a2-9c83-5fd1404bbf75",
          "httpRequestId": "e9189669-e5f5-40f5-ae5e-726551f6de5d",
          "scriptId": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
          "execution": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Balance format matches our client expectation",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "4e67c2509e6c49ca6a53290c92d233e1",
          "id": "44f71180-408a-4c84-951f-f2f91a5dcc62",
          "timestamp": 1751067997765,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "6e8e59db-2825-4de9-b95a-2b806a9c48de",
          "name": "Get Account Balance",
          "request": {
            "url": {
              "path": [
                "collection",
                "v1_0",
                "accountbalance"
              ],
              "host": [
                "{{mtn_sandbox_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{mtn_api_key}}"
              },
              {
                "key": "X-Target-Environment",
                "value": "sandbox"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{mtn_subscription_key}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has balance information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('availableBalance');",
                  "    pm.expect(jsonData).to.have.property('currency');",
                  "});",
                  "",
                  "pm.test('Balance format matches our client expectation', function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Our client expects availableBalance as string",
                  "    pm.expect(jsonData.availableBalance).to.be.a('string');",
                  "    pm.expect(parseFloat(jsonData.availableBalance)).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
              }
            }
          ]
        },
        "parent": {
          "id": "e8bdfe4a-9d00-44a6-b406-1e2d37414edb",
          "name": "MTN Mobile Money API Tests",
          "item": [
            {
              "id": "6e8e59db-2825-4de9-b95a-2b806a9c48de",
              "name": "Get Account Balance",
              "request": {
                "url": {
                  "path": [
                    "collection",
                    "v1_0",
                    "accountbalance"
                  ],
                  "host": [
                    "{{mtn_sandbox_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{mtn_api_key}}"
                  },
                  {
                    "key": "X-Target-Environment",
                    "value": "sandbox"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{mtn_subscription_key}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has balance information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('availableBalance');",
                      "    pm.expect(jsonData).to.have.property('currency');",
                      "});",
                      "",
                      "pm.test('Balance format matches our client expectation', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Our client expects availableBalance as string",
                      "    pm.expect(jsonData.availableBalance).to.be.a('string');",
                      "    pm.expect(parseFloat(jsonData.availableBalance)).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
                  }
                }
              ]
            },
            {
              "id": "973861f5-736d-4d95-967f-28d19851f609",
              "name": "Request to Pay",
              "request": {
                "url": {
                  "path": [
                    "collection",
                    "v1_0",
                    "requesttopay"
                  ],
                  "host": [
                    "{{mtn_sandbox_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{mtn_api_key}}"
                  },
                  {
                    "key": "X-Reference-Id",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "X-Target-Environment",
                    "value": "sandbox"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{mtn_subscription_key}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"amount\": \"100.00\",\n    \"currency\": \"EUR\",\n    \"externalId\": \"test-{{$timestamp}}\",\n    \"payer\": {\n        \"partyIdType\": \"MSISDN\",\n        \"partyId\": \"256774290781\"\n    },\n    \"payerMessage\": \"Test payment from Afrikpay\",\n    \"payeeNote\": \"Payment for crypto purchase\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fdacb6db-1423-4cd8-8497-3937b75bb581",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 202 (Accepted)', function () {",
                      "    pm.response.to.have.status(202);",
                      "});",
                      "",
                      "pm.test('Response has X-Reference-Id header', function () {",
                      "    pm.expect(pm.response.headers.get('X-Reference-Id')).to.not.be.null;",
                      "    // Store reference ID for status check",
                      "    pm.globals.set('mtn_reference_id', pm.response.headers.get('X-Reference-Id'));",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "id": "25baefb2-47b2-4ce4-87be-cb5b1a6dd46f",
              "name": "Get Payment Status",
              "request": {
                "url": {
                  "path": [
                    "collection",
                    "v1_0",
                    "requesttopay",
                    "{{mtn_reference_id}}"
                  ],
                  "host": [
                    "{{mtn_sandbox_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{mtn_api_key}}"
                  },
                  {
                    "key": "X-Target-Environment",
                    "value": "sandbox"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{mtn_subscription_key}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "64b5eb66-a6c1-4839-bd37-9ddd890e120f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has payment status fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('amount');",
                      "    pm.expect(jsonData).to.have.property('currency');",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "});",
                      "",
                      "pm.test('Status field matches our client expectations', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Our client maps MTN statuses to our internal statuses",
                      "    const validStatuses = ['PENDING', 'SUCCESSFUL', 'FAILED'];",
                      "    pm.expect(validStatuses).to.include(jsonData.status);",
                      "});",
                      "",
                      "pm.test('Amount format matches our client expectation', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Our client expects amount as string",
                      "    pm.expect(jsonData.amount).to.be.a('string');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4c74779e-e856-47a2-9c83-5fd1404bbf75",
          "httpRequestId": "e9189669-e5f5-40f5-ae5e-726551f6de5d",
          "scriptId": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
          "execution": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
        }
      },
      {
        "error": {
          "name": "AssertionFailure",
          "message": "Status code is 200, Response has balance information, Balance format matches our client expectation",
          "stack": "AssertionFailure: Status code is 200, Response has balance information, Balance format matches our client expectation\n    at postProcessContext (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/runner/extensions/event.command.js:41:17)\n    at PostmanCollectionRun.<anonymous> (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/runner/extensions/event.command.js:513:39)\n    at PostmanSandbox.<anonymous> (/opt/homebrew/lib/node_modules/newman/node_modules/postman-sandbox/lib/postman-sandbox.js:122:13)\n    at Object.onceWrapper (node:events:622:26)\n    at PostmanSandbox.emit (node:events:507:28)\n    at context.__uvm_emit (/opt/homebrew/lib/node_modules/newman/node_modules/uvm/lib/bridge.js:71:21)\n    at Object.dispatch (evalmachine.<anonymous>:20:13)\n    at Object.<anonymous> (evalmachine.<anonymous>:66:7838)\n    at t.exports.terminate (evalmachine.<anonymous>:66:20792)\n    at Immediate._onImmediate (evalmachine.<anonymous>:66:5971)\n    at process.processImmediate (node:internal/timers:507:21)",
          "checksum": "7002ba2dc40800a2ce9b60b257418992",
          "id": "a968840a-255d-4df3-99f3-1340daae6e3d",
          "timestamp": 1751067997766,
          "stacktrace": [
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/runner/extensions/event.command.js",
              "lineNumber": 41,
              "functionName": "postProcessContext",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/runner/extensions/event.command.js",
              "lineNumber": 513,
              "functionName": "",
              "typeName": "PostmanCollectionRun",
              "methodName": null,
              "columnNumber": 39,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-sandbox/lib/postman-sandbox.js",
              "lineNumber": 122,
              "functionName": "",
              "typeName": "PostmanSandbox",
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 622,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 507,
              "functionName": "PostmanSandbox.emit",
              "typeName": "PostmanSandbox",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/uvm/lib/bridge.js",
              "lineNumber": 71,
              "functionName": "context.__uvm_emit",
              "typeName": "context",
              "methodName": "__uvm_emit",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "evalmachine.<anonymous>",
              "lineNumber": 20,
              "functionName": "Object.dispatch",
              "typeName": "Object",
              "methodName": "dispatch",
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "evalmachine.<anonymous>",
              "lineNumber": 66,
              "functionName": "",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 7838,
              "native": false
            },
            {
              "fileName": "evalmachine.<anonymous>",
              "lineNumber": 66,
              "functionName": "t.exports.terminate",
              "typeName": "t",
              "methodName": "exports.terminate",
              "columnNumber": 20792,
              "native": false
            },
            {
              "fileName": "evalmachine.<anonymous>",
              "lineNumber": 66,
              "functionName": "Immediate._onImmediate",
              "typeName": "Immediate",
              "methodName": "_onImmediate",
              "columnNumber": 5971,
              "native": false
            },
            {
              "fileName": "node:internal/timers",
              "lineNumber": 507,
              "functionName": "process.processImmediate",
              "typeName": "process",
              "methodName": "processImmediate",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "test-script:39:17",
        "source": {
          "id": "6e8e59db-2825-4de9-b95a-2b806a9c48de",
          "name": "Get Account Balance",
          "request": {
            "url": {
              "path": [
                "collection",
                "v1_0",
                "accountbalance"
              ],
              "host": [
                "{{mtn_sandbox_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{mtn_api_key}}"
              },
              {
                "key": "X-Target-Environment",
                "value": "sandbox"
              },
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{mtn_subscription_key}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has balance information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('availableBalance');",
                  "    pm.expect(jsonData).to.have.property('currency');",
                  "});",
                  "",
                  "pm.test('Balance format matches our client expectation', function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Our client expects availableBalance as string",
                  "    pm.expect(jsonData.availableBalance).to.be.a('string');",
                  "    pm.expect(parseFloat(jsonData.availableBalance)).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
              }
            }
          ]
        },
        "parent": {
          "id": "e8bdfe4a-9d00-44a6-b406-1e2d37414edb",
          "name": "MTN Mobile Money API Tests",
          "item": [
            {
              "id": "6e8e59db-2825-4de9-b95a-2b806a9c48de",
              "name": "Get Account Balance",
              "request": {
                "url": {
                  "path": [
                    "collection",
                    "v1_0",
                    "accountbalance"
                  ],
                  "host": [
                    "{{mtn_sandbox_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{mtn_api_key}}"
                  },
                  {
                    "key": "X-Target-Environment",
                    "value": "sandbox"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{mtn_subscription_key}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a8d8330-cb42-4eef-b8a7-c329fb763e89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has balance information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('availableBalance');",
                      "    pm.expect(jsonData).to.have.property('currency');",
                      "});",
                      "",
                      "pm.test('Balance format matches our client expectation', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Our client expects availableBalance as string",
                      "    pm.expect(jsonData.availableBalance).to.be.a('string');",
                      "    pm.expect(parseFloat(jsonData.availableBalance)).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "3ce37789-8d63-4a30-8d39-da4788ad8ab8"
                  }
                }
              ]
            },
            {
              "id": "973861f5-736d-4d95-967f-28d19851f609",
              "name": "Request to Pay",
              "request": {
                "url": {
                  "path": [
                    "collection",
                    "v1_0",
                    "requesttopay"
                  ],
                  "host": [
                    "{{mtn_sandbox_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{mtn_api_key}}"
                  },
                  {
                    "key": "X-Reference-Id",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "X-Target-Environment",
                    "value": "sandbox"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{mtn_subscription_key}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"amount\": \"100.00\",\n    \"currency\": \"EUR\",\n    \"externalId\": \"test-{{$timestamp}}\",\n    \"payer\": {\n        \"partyIdType\": \"MSISDN\",\n        \"partyId\": \"256774290781\"\n    },\n    \"payerMessage\": \"Test payment from Afrikpay\",\n    \"payeeNote\": \"Payment for crypto purchase\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fdacb6db-1423-4cd8-8497-3937b75bb581",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 202 (Accepted)', function () {",
                      "    pm.response.to.have.status(202);",
                      "});",
                      "",
                      "pm.test('Response has X-Reference-Id header', function () {",
                      "    pm.expect(pm.response.headers.get('X-Reference-Id')).to.not.be.null;",
                      "    // Store reference ID for status check",
                      "    pm.globals.set('mtn_reference_id', pm.response.headers.get('X-Reference-Id'));",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "id": "25baefb2-47b2-4ce4-87be-cb5b1a6dd46f",
              "name": "Get Payment Status",
              "request": {
                "url": {
                  "path": [
                    "collection",
                    "v1_0",
                    "requesttopay",
                    "{{mtn_reference_id}}"
                  ],
                  "host": [
                    "{{mtn_sandbox_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{mtn_api_key}}"
                  },
                  {
                    "key": "X-Target-Environment",
                    "value": "sandbox"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{mtn_subscription_key}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "64b5eb66-a6c1-4839-bd37-9ddd890e120f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has payment status fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('amount');",
                      "    pm.expect(jsonData).to.have.property('currency');",
                      "    pm.expect(jsonData).to.have.property('status');",
                      "});",
                      "",
                      "pm.test('Status field matches our client expectations', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Our client maps MTN statuses to our internal statuses",
                      "    const validStatuses = ['PENDING', 'SUCCESSFUL', 'FAILED'];",
                      "    pm.expect(validStatuses).to.include(jsonData.status);",
                      "});",
                      "",
                      "pm.test('Amount format matches our client expectation', function () {",
                      "    const jsonData = pm.response.json();",
                      "    // Our client expects amount as string",
                      "    pm.expect(jsonData.amount).to.be.a('string');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4c74779e-e856-47a2-9c83-5fd1404bbf75",
          "httpRequestId": "e9189669-e5f5-40f5-ae5e-726551f6de5d",
          "scriptId": "1a8d8330-cb42-4eef-b8a7-c329fb763e89"
        }
      }
    ],
    "error": null
  }
}