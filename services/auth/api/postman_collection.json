{
  "info": {
    "name": "Afrikpay Gateway - Auth Service",
    "description": "Collection Postman pour tester l'API d'authentification du service Auth d'Afrikpay Gateway.\n\n**Instructions d'utilisation :**\n1. Exécuter d'abord la requête \"Login\" pour obtenir les tokens\n2. Les tokens sont automatiquement sauvegardés dans les variables d'environnement\n3. Les autres requêtes utilisent automatiquement ces tokens\n\n**Variables d'environnement requises :**\n- `base_url` : URL de base du service (ex: http://localhost:8001)\n- `access_token` : Token d'accès (automatiquement défini après login)\n- `refresh_token` : Token de renouvellement (automatiquement défini après login)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "afrikpay-auth-api"
  },
  "item": [
    {
      "name": "Health Checks",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Vérifie l'état de santé du service Auth"
          },
          "response": []
        },
        {
          "name": "Readiness Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ready",
              "host": ["{{base_url}}"],
              "path": ["ready"]
            },
            "description": "Vérifie si le service est prêt à recevoir du trafic"
          },
          "response": []
        },
        {
          "name": "Liveness Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/live",
              "host": ["{{base_url}}"],
              "path": ["live"]
            },
            "description": "Vérifie si le service est vivant"
          },
          "response": []
        }
      ],
      "description": "Endpoints de monitoring et health checks"
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test de la réponse",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has access_token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData).to.have.property('refresh_token');",
                  "    pm.expect(jsonData).to.have.property('token_type');",
                  "    pm.expect(jsonData).to.have.property('expires_in');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "});",
                  "",
                  "// Sauvegarde des tokens dans les variables d'environnement",
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set(\"access_token\", jsonData.access_token);",
                  "    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
                  "    console.log(\"Tokens sauvegardés dans les variables d'environnement\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Authentifie un utilisateur et retourne une paire de tokens JWT.\n\n**Identifiants de test :**\n- Email: test@example.com\n- Password: password123"
          },
          "response": []
        },
        {
          "name": "Verify Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user claims\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('roles');",
                  "    pm.expect(jsonData).to.have.property('exp');",
                  "    pm.expect(jsonData).to.have.property('iat');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Token JWT obtenu via login"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/verify",
              "host": ["{{base_url}}"],
              "path": ["auth", "verify"]
            },
            "description": "Vérifie la validité d'un token JWT et retourne les claims.\n\n**Prérequis :** Exécuter d'abord la requête \"Login\" pour obtenir un access_token valide."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has new tokens\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData).to.have.property('refresh_token');",
                  "    pm.expect(jsonData).to.have.property('expires_in');",
                  "});",
                  "",
                  "// Mise à jour des tokens dans les variables d'environnement",
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set(\"access_token\", jsonData.access_token);",
                  "    pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
                  "    console.log(\"Nouveaux tokens sauvegardés dans les variables d'environnement\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Renouvelle un access token en utilisant un refresh token valide.\n\n**Prérequis :** Exécuter d'abord la requête \"Login\" pour obtenir un refresh_token valide."
          },
          "response": []
        }
      ],
      "description": "Endpoints d'authentification JWT"
    },
    {
      "name": "Protected Endpoints",
      "item": [
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user profile\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('roles');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "description": "Token JWT obtenu via login"
              }
            ],
            "url": {
              "raw": "{{base_url}}/protected/profile",
              "host": ["{{base_url}}"],
              "path": ["protected", "profile"]
            },
            "description": "Endpoint protégé d'exemple qui retourne le profil utilisateur.\n\n**Prérequis :** Exécuter d'abord la requête \"Login\" pour obtenir un access_token valide."
          },
          "response": []
        }
      ],
      "description": "Endpoints protégés nécessitant une authentification"
    },
    {
      "name": "Error Cases",
      "item": [
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response contains error details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('code');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData.code).to.eql('INVALID_CREDENTIALS');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"wrong@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Test d'authentification avec des identifiants invalides"
          },
          "response": []
        },
        {
          "name": "Verify Token - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response contains error details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('code');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData.code).to.eql('INVALID_TOKEN');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_here"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/verify",
              "host": ["{{base_url}}"],
              "path": ["auth", "verify"]
            },
            "description": "Test de vérification avec un token invalide"
          },
          "response": []
        },
        {
          "name": "Protected Endpoint - No Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response contains error details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('code');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData.code).to.eql('MISSING_TOKEN');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/protected/profile",
              "host": ["{{base_url}}"],
              "path": ["protected", "profile"]
            },
            "description": "Test d'accès à un endpoint protégé sans token"
          },
          "response": []
        }
      ],
      "description": "Tests des cas d'erreur et de validation"
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8001",
      "description": "URL de base du service Auth"
    }
  ]
}
